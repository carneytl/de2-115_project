
lab5_pixel.elf:     file format elf32-littlenios2
lab5_pixel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020244

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x00003414 memsz 0x00003414 flags r-x
    LOAD off    0x00005000 vaddr 0x00000000 paddr 0x04023434 align 2**12
         filesz 0x00000448 memsz 0x00000568 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000031f0  04020244  04020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d0  00000000  04023434  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000378  000000d0  04023504  000050d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00000448  0402387c  00005448  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00000568  00000568  00005448  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0402387c  0402387c  00005448  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00005448  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000660  00000000  00000000  00005470  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000081db  00000000  00000000  00005ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002c42  00000000  00000000  0000dcab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003333  00000000  00000000  000108ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000ddc  00000000  00000000  00013c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f49  00000000  00000000  000149fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000b2d  00000000  00000000  00016945  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00017474  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001e0  00000000  00000000  000174d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00019522  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00019525  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00019531  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00019532  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00019533  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00019537  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001953b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0001953f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0001954a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00019555  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  00019560  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0001956a  2**0
                  CONTENTS, READONLY
 30 .jdi          00004783  00000000  00000000  000195a9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00075ad3  00000000  00000000  0001dd2c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020244 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
000000d0 l    d  .rwdata	00000000 .rwdata
00000448 l    d  .bss	00000000 .bss
00000568 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0402387c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab5_pixel_bsp//obj/HAL/src/crt0.o
0402028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 box.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000000d0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
04020660 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
040207f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402092c l     F .text	00000034 alt_dev_reg
000001b0 l     O .rwdata	0000002c jtag_uart_0
000001dc l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000230 l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04020ee4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04021fe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04022138 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04022164 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04022668 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
040227a8 l     F .text	0000003c alt_get_errno
040227e4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000464 g     O .bss	00000004 alt_instruction_exception_handler
0402074c g     F .text	0000007c alt_main
040218ac g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
040204a0 g     F .text	00000080 _puts_r
00000468 g     O .bss	00000100 alt_irq
04023504 g       *ABS*	00000000 __flash_rwdata_start
04021014 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
04022c04 g     F .text	00000024 altera_nios2_gen2_irq_init
04020fd8 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
04020000 g     F .entry	0000001c __reset
04020020 g       *ABS*	00000000 __flash_exceptions_start
00000448 g     O .bss	00000004 errno
00000450 g     O .bss	00000004 alt_argv
0000841c g       *ABS*	00000000 _gp
040207c8 g     F .text	00000030 usleep
040211a8 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
0000029c g     O .rwdata	00000180 alt_fd_list
04022304 g     F .text	00000090 alt_find_dev
0402272c g     F .text	0000007c alt_io_redirect
04023434 g       *ABS*	00000000 __DTOR_END__
04020520 g     F .text	00000014 puts
04022e64 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04021264 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
04020d64 g     F .text	000000ec altera_avalon_jtag_uart_read
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04023344 g     F .text	00000064 .hidden __udivsi3
0402169c g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
04022dd4 g     F .text	00000090 alt_icache_flush
04021bc0 g     F .text	00000084 helper_plot_pixel
00000434 g     O .rwdata	00000004 alt_max_fd
04021298 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0000041c g     O .rwdata	00000004 _global_impure_ptr
00000568 g       *ABS*	00000000 __bss_end
04022578 g     F .text	000000f0 alt_iic_isr_register
040213c0 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
04022afc g     F .text	00000108 alt_tick
0402252c g     F .text	0000004c alt_ic_irq_enabled
04022a60 g     F .text	0000009c alt_alarm_stop
00000458 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
00000274 g     O .rwdata	00000028 alt_dev_null
040220f0 g     F .text	00000048 alt_dcache_flush_all
04021af8 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
00000448 g       *ABS*	00000000 __ram_rwdata_end
0000042c g     O .rwdata	00000008 alt_dev_list
04020834 g     F .text	000000f8 write
04021c44 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
000000d0 g       *ABS*	00000000 __ram_rodata_end
040233a8 g     F .text	00000058 .hidden __umodsi3
00000568 g       *ABS*	00000000 end
040201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04023434 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
04020f5c g     F .text	0000007c alt_avalon_timer_sc_init
04020e50 g     F .text	00000094 altera_avalon_jtag_uart_write
040230bc g     F .text	00000190 __call_exitprocs
04020244 g     F .text	0000004c _start
0000045c g     O .bss	00000004 _alt_tick_rate
00000460 g     O .bss	00000004 _alt_nticks
04020998 g     F .text	0000030c alt_sys_init
04022f64 g     F .text	00000158 __register_exitproc
000000d0 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
04020ca4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04022d30 g     F .text	000000a4 alt_get_fd
04021e8c g     F .text	00000158 alt_busy_sleep
04022f34 g     F .text	00000030 memcmp
00000568 g       *ABS*	00000000 __alt_stack_base
04022c28 g     F .text	00000108 alt_find_file
040221a0 g     F .text	000000a4 alt_dev_llist_insert
04020550 g     F .text	000000b8 __sfvwrite_small_dev
00000448 g       *ABS*	00000000 __bss_start
04020290 g     F .text	00000210 main
00000454 g     O .bss	00000004 alt_envp
04021204 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
04020d04 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000438 g     O .rwdata	00000004 alt_errno
0402324c g     F .text	00000084 .hidden __divsi3
04023434 g       *ABS*	00000000 __CTOR_END__
04023434 g       *ABS*	00000000 __flash_rodata_start
04023434 g       *ABS*	00000000 __DTOR_LIST__
04020960 g     F .text	00000038 alt_irq_init
040229fc g     F .text	00000064 alt_release_fd
04022f00 g     F .text	00000014 atexit
04020608 g     F .text	00000058 _write_r
00000420 g     O .rwdata	00000004 _impure_ptr
0000044c g     O .bss	00000004 alt_argc
040222a4 g     F .text	00000060 _do_dtors
04020020 g       .exceptions	00000000 alt_irq_entry
00000424 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
040223c8 g     F .text	00000050 alt_ic_isr_register
00000448 g       *ABS*	00000000 _edata
00000568 g       *ABS*	00000000 _end
04020244 g       *ABS*	00000000 __ram_exceptions_end
040224a0 g     F .text	0000008c alt_ic_irq_disable
04022f14 g     F .text	00000020 exit
040232d0 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04023400 g     F .text	00000034 _exit
04020534 g     F .text	0000001c strlen
040228a8 g     F .text	00000154 open
04022394 g     F .text	00000034 alt_icache_flush_all
0000043c g     O .rwdata	00000004 alt_priority_mask
04022418 g     F .text	00000088 alt_ic_irq_enable
00000440 g     O .rwdata	00000008 alt_alarm_list
04022244 g     F .text	00000060 _do_ctors
04022020 g     F .text	000000d0 close
040206c8 g     F .text	00000084 alt_load



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__flash_rwdata_start+0xffffcb00>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020014:	08409114 	ori	at,at,580
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	00800034 	movhi	r2,0
 4020140:	10811a04 	addi	r2,r2,1128
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	00800034 	movhi	r2,0
 4020158:	10811a04 	addi	r2,r2,1128
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__flash_rwdata_start+0xffffcc28>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__flash_rwdata_start+0xffffcc1c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201e4:	000531fa 	rdctl	r2,exception
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201ec:	e0bffd17 	ldw	r2,-12(fp)
 40201f0:	10801f0c 	andi	r2,r2,124
 40201f4:	1004d0ba 	srli	r2,r2,2
 40201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40201fc:	0005333a 	rdctl	r2,badaddr
 4020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020204:	d0a01217 	ldw	r2,-32696(gp)
 4020208:	10000726 	beq	r2,zero,4020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 402020c:	d0a01217 	ldw	r2,-32696(gp)
 4020210:	e0fffd17 	ldw	r3,-12(fp)
 4020214:	e1bffe17 	ldw	r6,-8(fp)
 4020218:	e17fff17 	ldw	r5,-4(fp)
 402021c:	1809883a 	mov	r4,r3
 4020220:	103ee83a 	callr	r2
 4020224:	00000206 	br	4020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 402022c:	0005883a 	mov	r2,zero
}
 4020230:	e037883a 	mov	sp,fp
 4020234:	dfc00117 	ldw	ra,4(sp)
 4020238:	df000017 	ldw	fp,0(sp)
 402023c:	dec00204 	addi	sp,sp,8
 4020240:	f800283a 	ret

Disassembly of section .text:

04020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 402024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4020250:	00bffd16 	blt	zero,r2,4020248 <__flash_rwdata_start+0xffffcd44>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 402025c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 4020260:	d6a10714 	ori	gp,gp,33820
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4020268:	10811214 	ori	r2,r2,1096

    movhi r3, %hi(__bss_end)
 402026c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 4020270:	18c15a14 	ori	r3,r3,1384

    beq r2, r3, 1f
 4020274:	10c00326 	beq	r2,r3,4020284 <_start+0x40>

0:
    stw zero, (r2)
 4020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 402027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4020280:	10fffd36 	bltu	r2,r3,4020278 <__flash_rwdata_start+0xffffcd74>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020284:	40206c80 	call	40206c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020288:	402074c0 	call	402074c <alt_main>

0402028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 402028c:	003fff06 	br	402028c <__flash_rwdata_start+0xffffcd88>

04020290 <main>:
#include "system.h"
#include <stdio.h>
#include <unistd.h>       // remove for using timer, not usleep()

int main()
{
 4020290:	defff204 	addi	sp,sp,-56
 4020294:	dfc00d15 	stw	ra,52(sp)
 4020298:	df000c15 	stw	fp,48(sp)
 402029c:	df000c04 	addi	fp,sp,48
	//global variables
	alt_u16 color = 0x0000;
 40202a0:	e03ff70d 	sth	zero,-36(fp)
	//Used to control x and y coordinates.
	int x;
	int y;

	//Used to manually set initial position of first pixel. Couldn't place it exactly in screen center.
	int x0 = 100;
 40202a4:	00801904 	movi	r2,100
 40202a8:	e0bffa15 	stw	r2,-24(fp)
	int y0 = 100;
 40202ac:	00801904 	movi	r2,100
 40202b0:	e0bffb15 	stw	r2,-20(fp)
	int x1 = 100;
 40202b4:	00801904 	movi	r2,100
 40202b8:	e0bffc15 	stw	r2,-16(fp)
	int y1 = 100;
 40202bc:	00801904 	movi	r2,100
 40202c0:	e0bffd15 	stw	r2,-12(fp)


	alt_up_pixel_buffer_dma_dev* pixel_buf_dma_dev;
	pixel_buf_dma_dev = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
 40202c4:	01000034 	movhi	r4,0
 40202c8:	21000004 	addi	r4,r4,0
 40202cc:	4020fd80 	call	4020fd8 <alt_up_pixel_buffer_dma_open_dev>
 40202d0:	e0bffe15 	stw	r2,-8(fp)

	if(pixel_buf_dma_dev == NULL)
 40202d4:	e0bffe17 	ldw	r2,-8(fp)
 40202d8:	1000041e 	bne	r2,zero,40202ec <main+0x5c>
	{
		printf("Pixel buffer not opened\n");
 40202dc:	01000034 	movhi	r4,0
 40202e0:	21000804 	addi	r4,r4,32
 40202e4:	40205200 	call	4020520 <puts>
 40202e8:	00000306 	br	40202f8 <main+0x68>
	}
	else
		printf("Pixel buffer opened successfully!\n");
 40202ec:	01000034 	movhi	r4,0
 40202f0:	21000e04 	addi	r4,r4,56
 40202f4:	40205200 	call	4020520 <puts>

	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, 0);
 40202f8:	000b883a 	mov	r5,zero
 40202fc:	e13ffe17 	ldw	r4,-8(fp)
 4020300:	40212980 	call	4021298 <alt_up_pixel_buffer_dma_clear_screen>
	usleep(1000000);
 4020304:	010003f4 	movhi	r4,15
 4020308:	21109004 	addi	r4,r4,16960
 402030c:	40207c80 	call	40207c8 <usleep>
	alt_up_pixel_buffer_dma_draw_line(pixel_buf_dma_dev, x0, y0, x1, y1, color, 0);
 4020310:	e0bff70b 	ldhu	r2,-36(fp)
 4020314:	d8000215 	stw	zero,8(sp)
 4020318:	d8800115 	stw	r2,4(sp)
 402031c:	e0bffd17 	ldw	r2,-12(fp)
 4020320:	d8800015 	stw	r2,0(sp)
 4020324:	e1fffc17 	ldw	r7,-16(fp)
 4020328:	e1bffb17 	ldw	r6,-20(fp)
 402032c:	e17ffa17 	ldw	r5,-24(fp)
 4020330:	e13ffe17 	ldw	r4,-8(fp)
 4020334:	4021c440 	call	4021c44 <alt_up_pixel_buffer_dma_draw_line>

	while(1)
	{
		//Use of switches and keybuttons.
		sw = IORD_ALTERA_AVALON_PIO_DATA(SW_PIO_BASE);
 4020338:	00810134 	movhi	r2,1028
 402033c:	10840c04 	addi	r2,r2,4144
 4020340:	10800037 	ldwio	r2,0(r2)
 4020344:	e0bfff05 	stb	r2,-4(fp)
		key = IORD_ALTERA_AVALON_PIO_DATA(KEY_PIO_BASE);
 4020348:	00810134 	movhi	r2,1028
 402034c:	10840804 	addi	r2,r2,4128
 4020350:	10800037 	ldwio	r2,0(r2)
 4020354:	e0bfff45 	stb	r2,-3(fp)

		//if KEY1 is open, color of pixel will change.
		//Color-- is used multiple times for a noticeable change in color while in use.

		 if((key & 0x02)){
 4020358:	e0bfff43 	ldbu	r2,-3(fp)
 402035c:	1080008c 	andi	r2,r2,2
 4020360:	10001826 	beq	r2,zero,40203c4 <main+0x134>
			 color--;
 4020364:	e0bff70b 	ldhu	r2,-36(fp)
 4020368:	10bfffc4 	addi	r2,r2,-1
 402036c:	e0bff70d 	sth	r2,-36(fp)
			 color--;
 4020370:	e0bff70b 	ldhu	r2,-36(fp)
 4020374:	10bfffc4 	addi	r2,r2,-1
 4020378:	e0bff70d 	sth	r2,-36(fp)
			 color--;
 402037c:	e0bff70b 	ldhu	r2,-36(fp)
 4020380:	10bfffc4 	addi	r2,r2,-1
 4020384:	e0bff70d 	sth	r2,-36(fp)
			 color--;
 4020388:	e0bff70b 	ldhu	r2,-36(fp)
 402038c:	10bfffc4 	addi	r2,r2,-1
 4020390:	e0bff70d 	sth	r2,-36(fp)
			 color--;
 4020394:	e0bff70b 	ldhu	r2,-36(fp)
 4020398:	10bfffc4 	addi	r2,r2,-1
 402039c:	e0bff70d 	sth	r2,-36(fp)
			 color--;
 40203a0:	e0bff70b 	ldhu	r2,-36(fp)
 40203a4:	10bfffc4 	addi	r2,r2,-1
 40203a8:	e0bff70d 	sth	r2,-36(fp)
			 color--;
 40203ac:	e0bff70b 	ldhu	r2,-36(fp)
 40203b0:	10bfffc4 	addi	r2,r2,-1
 40203b4:	e0bff70d 	sth	r2,-36(fp)
			 color--;
 40203b8:	e0bff70b 	ldhu	r2,-36(fp)
 40203bc:	10bfffc4 	addi	r2,r2,-1
 40203c0:	e0bff70d 	sth	r2,-36(fp)
		 }
		 if (sw & 0x01){
 40203c4:	e0bfff03 	ldbu	r2,-4(fp)
 40203c8:	1080004c 	andi	r2,r2,1
 40203cc:	10000326 	beq	r2,zero,40203dc <main+0x14c>
			 //right
			 x++;
 40203d0:	e0bff817 	ldw	r2,-32(fp)
 40203d4:	10800044 	addi	r2,r2,1
 40203d8:	e0bff815 	stw	r2,-32(fp)
		 }
		 if (sw & 0x02){
 40203dc:	e0bfff03 	ldbu	r2,-4(fp)
 40203e0:	1080008c 	andi	r2,r2,2
 40203e4:	10000326 	beq	r2,zero,40203f4 <main+0x164>
			 //up
			 y++;
 40203e8:	e0bff917 	ldw	r2,-28(fp)
 40203ec:	10800044 	addi	r2,r2,1
 40203f0:	e0bff915 	stw	r2,-28(fp)
		 }
		 if (sw & 0x04){
 40203f4:	e0bfff03 	ldbu	r2,-4(fp)
 40203f8:	1080010c 	andi	r2,r2,4
 40203fc:	10000326 	beq	r2,zero,402040c <main+0x17c>
			 //left
			 x--;
 4020400:	e0bff817 	ldw	r2,-32(fp)
 4020404:	10bfffc4 	addi	r2,r2,-1
 4020408:	e0bff815 	stw	r2,-32(fp)
		 }
		 if (sw & 0x08){
 402040c:	e0bfff03 	ldbu	r2,-4(fp)
 4020410:	1080020c 	andi	r2,r2,8
 4020414:	10000326 	beq	r2,zero,4020424 <main+0x194>
			 //down
			 y--;
 4020418:	e0bff917 	ldw	r2,-28(fp)
 402041c:	10bfffc4 	addi	r2,r2,-1
 4020420:	e0bff915 	stw	r2,-28(fp)
		 }
		 if (!(key & 0x01)){
 4020424:	e0bfff43 	ldbu	r2,-3(fp)
 4020428:	1080004c 	andi	r2,r2,1
 402042c:	1000031e 	bne	r2,zero,402043c <main+0x1ac>
			 //function is called to clear screen.
			 alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dma_dev, 0);
 4020430:	000b883a 	mov	r5,zero
 4020434:	e13ffe17 	ldw	r4,-8(fp)
 4020438:	40212980 	call	4021298 <alt_up_pixel_buffer_dma_clear_screen>
		 }
		 	 //int x and int y are added to coordinates of function to move line.
			 alt_up_pixel_buffer_dma_draw_line(pixel_buf_dma_dev, x0 + x, y0 + y, x1 + x, y1 + y, color, 0);
 402043c:	e0fffa17 	ldw	r3,-24(fp)
 4020440:	e0bff817 	ldw	r2,-32(fp)
 4020444:	1889883a 	add	r4,r3,r2
 4020448:	e0fffb17 	ldw	r3,-20(fp)
 402044c:	e0bff917 	ldw	r2,-28(fp)
 4020450:	188b883a 	add	r5,r3,r2
 4020454:	e0fffc17 	ldw	r3,-16(fp)
 4020458:	e0bff817 	ldw	r2,-32(fp)
 402045c:	188d883a 	add	r6,r3,r2
 4020460:	e0fffd17 	ldw	r3,-12(fp)
 4020464:	e0bff917 	ldw	r2,-28(fp)
 4020468:	1885883a 	add	r2,r3,r2
 402046c:	e0fff70b 	ldhu	r3,-36(fp)
 4020470:	d8000215 	stw	zero,8(sp)
 4020474:	d8c00115 	stw	r3,4(sp)
 4020478:	d8800015 	stw	r2,0(sp)
 402047c:	300f883a 	mov	r7,r6
 4020480:	280d883a 	mov	r6,r5
 4020484:	200b883a 	mov	r5,r4
 4020488:	e13ffe17 	ldw	r4,-8(fp)
 402048c:	4021c440 	call	4021c44 <alt_up_pixel_buffer_dma_draw_line>
		usleep(100000);
 4020490:	010000b4 	movhi	r4,2
 4020494:	2121a804 	addi	r4,r4,-31072
 4020498:	40207c80 	call	40207c8 <usleep>
	}
 402049c:	003fa606 	br	4020338 <__flash_rwdata_start+0xffffce34>

040204a0 <_puts_r>:
 40204a0:	defffd04 	addi	sp,sp,-12
 40204a4:	dc000015 	stw	r16,0(sp)
 40204a8:	2021883a 	mov	r16,r4
 40204ac:	2809883a 	mov	r4,r5
 40204b0:	dfc00215 	stw	ra,8(sp)
 40204b4:	dc400115 	stw	r17,4(sp)
 40204b8:	2823883a 	mov	r17,r5
 40204bc:	40205340 	call	4020534 <strlen>
 40204c0:	81400217 	ldw	r5,8(r16)
 40204c4:	010100b4 	movhi	r4,1026
 40204c8:	21015404 	addi	r4,r4,1360
 40204cc:	29000115 	stw	r4,4(r5)
 40204d0:	100f883a 	mov	r7,r2
 40204d4:	880d883a 	mov	r6,r17
 40204d8:	8009883a 	mov	r4,r16
 40204dc:	40205500 	call	4020550 <__sfvwrite_small_dev>
 40204e0:	00ffffc4 	movi	r3,-1
 40204e4:	10c00926 	beq	r2,r3,402050c <_puts_r+0x6c>
 40204e8:	81400217 	ldw	r5,8(r16)
 40204ec:	01800034 	movhi	r6,0
 40204f0:	01c00044 	movi	r7,1
 40204f4:	28800117 	ldw	r2,4(r5)
 40204f8:	31801704 	addi	r6,r6,92
 40204fc:	8009883a 	mov	r4,r16
 4020500:	103ee83a 	callr	r2
 4020504:	10bfffe0 	cmpeqi	r2,r2,-1
 4020508:	0085c83a 	sub	r2,zero,r2
 402050c:	dfc00217 	ldw	ra,8(sp)
 4020510:	dc400117 	ldw	r17,4(sp)
 4020514:	dc000017 	ldw	r16,0(sp)
 4020518:	dec00304 	addi	sp,sp,12
 402051c:	f800283a 	ret

04020520 <puts>:
 4020520:	00800034 	movhi	r2,0
 4020524:	10810804 	addi	r2,r2,1056
 4020528:	200b883a 	mov	r5,r4
 402052c:	11000017 	ldw	r4,0(r2)
 4020530:	40204a01 	jmpi	40204a0 <_puts_r>

04020534 <strlen>:
 4020534:	2005883a 	mov	r2,r4
 4020538:	10c00007 	ldb	r3,0(r2)
 402053c:	18000226 	beq	r3,zero,4020548 <strlen+0x14>
 4020540:	10800044 	addi	r2,r2,1
 4020544:	003ffc06 	br	4020538 <__flash_rwdata_start+0xffffd034>
 4020548:	1105c83a 	sub	r2,r2,r4
 402054c:	f800283a 	ret

04020550 <__sfvwrite_small_dev>:
 4020550:	2880000b 	ldhu	r2,0(r5)
 4020554:	1080020c 	andi	r2,r2,8
 4020558:	10002126 	beq	r2,zero,40205e0 <__sfvwrite_small_dev+0x90>
 402055c:	2880008f 	ldh	r2,2(r5)
 4020560:	defffa04 	addi	sp,sp,-24
 4020564:	dc000015 	stw	r16,0(sp)
 4020568:	dfc00515 	stw	ra,20(sp)
 402056c:	dd000415 	stw	r20,16(sp)
 4020570:	dcc00315 	stw	r19,12(sp)
 4020574:	dc800215 	stw	r18,8(sp)
 4020578:	dc400115 	stw	r17,4(sp)
 402057c:	2821883a 	mov	r16,r5
 4020580:	10001216 	blt	r2,zero,40205cc <__sfvwrite_small_dev+0x7c>
 4020584:	2027883a 	mov	r19,r4
 4020588:	3025883a 	mov	r18,r6
 402058c:	3823883a 	mov	r17,r7
 4020590:	05010004 	movi	r20,1024
 4020594:	04400b0e 	bge	zero,r17,40205c4 <__sfvwrite_small_dev+0x74>
 4020598:	880f883a 	mov	r7,r17
 402059c:	a440010e 	bge	r20,r17,40205a4 <__sfvwrite_small_dev+0x54>
 40205a0:	01c10004 	movi	r7,1024
 40205a4:	8140008f 	ldh	r5,2(r16)
 40205a8:	900d883a 	mov	r6,r18
 40205ac:	9809883a 	mov	r4,r19
 40205b0:	40206080 	call	4020608 <_write_r>
 40205b4:	0080050e 	bge	zero,r2,40205cc <__sfvwrite_small_dev+0x7c>
 40205b8:	88a3c83a 	sub	r17,r17,r2
 40205bc:	90a5883a 	add	r18,r18,r2
 40205c0:	003ff406 	br	4020594 <__flash_rwdata_start+0xffffd090>
 40205c4:	0005883a 	mov	r2,zero
 40205c8:	00000706 	br	40205e8 <__sfvwrite_small_dev+0x98>
 40205cc:	8080000b 	ldhu	r2,0(r16)
 40205d0:	10801014 	ori	r2,r2,64
 40205d4:	8080000d 	sth	r2,0(r16)
 40205d8:	00bfffc4 	movi	r2,-1
 40205dc:	00000206 	br	40205e8 <__sfvwrite_small_dev+0x98>
 40205e0:	00bfffc4 	movi	r2,-1
 40205e4:	f800283a 	ret
 40205e8:	dfc00517 	ldw	ra,20(sp)
 40205ec:	dd000417 	ldw	r20,16(sp)
 40205f0:	dcc00317 	ldw	r19,12(sp)
 40205f4:	dc800217 	ldw	r18,8(sp)
 40205f8:	dc400117 	ldw	r17,4(sp)
 40205fc:	dc000017 	ldw	r16,0(sp)
 4020600:	dec00604 	addi	sp,sp,24
 4020604:	f800283a 	ret

04020608 <_write_r>:
 4020608:	defffd04 	addi	sp,sp,-12
 402060c:	dc000015 	stw	r16,0(sp)
 4020610:	04000034 	movhi	r16,0
 4020614:	dc400115 	stw	r17,4(sp)
 4020618:	84011204 	addi	r16,r16,1096
 402061c:	2023883a 	mov	r17,r4
 4020620:	2809883a 	mov	r4,r5
 4020624:	300b883a 	mov	r5,r6
 4020628:	380d883a 	mov	r6,r7
 402062c:	dfc00215 	stw	ra,8(sp)
 4020630:	80000015 	stw	zero,0(r16)
 4020634:	40208340 	call	4020834 <write>
 4020638:	00ffffc4 	movi	r3,-1
 402063c:	10c0031e 	bne	r2,r3,402064c <_write_r+0x44>
 4020640:	80c00017 	ldw	r3,0(r16)
 4020644:	18000126 	beq	r3,zero,402064c <_write_r+0x44>
 4020648:	88c00015 	stw	r3,0(r17)
 402064c:	dfc00217 	ldw	ra,8(sp)
 4020650:	dc400117 	ldw	r17,4(sp)
 4020654:	dc000017 	ldw	r16,0(sp)
 4020658:	dec00304 	addi	sp,sp,12
 402065c:	f800283a 	ret

04020660 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4020660:	defffc04 	addi	sp,sp,-16
 4020664:	df000315 	stw	fp,12(sp)
 4020668:	df000304 	addi	fp,sp,12
 402066c:	e13ffd15 	stw	r4,-12(fp)
 4020670:	e17ffe15 	stw	r5,-8(fp)
 4020674:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4020678:	e0fffe17 	ldw	r3,-8(fp)
 402067c:	e0bffd17 	ldw	r2,-12(fp)
 4020680:	18800c26 	beq	r3,r2,40206b4 <alt_load_section+0x54>
  {
    while( to != end )
 4020684:	00000806 	br	40206a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4020688:	e0bffe17 	ldw	r2,-8(fp)
 402068c:	10c00104 	addi	r3,r2,4
 4020690:	e0fffe15 	stw	r3,-8(fp)
 4020694:	e0fffd17 	ldw	r3,-12(fp)
 4020698:	19000104 	addi	r4,r3,4
 402069c:	e13ffd15 	stw	r4,-12(fp)
 40206a0:	18c00017 	ldw	r3,0(r3)
 40206a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 40206a8:	e0fffe17 	ldw	r3,-8(fp)
 40206ac:	e0bfff17 	ldw	r2,-4(fp)
 40206b0:	18bff51e 	bne	r3,r2,4020688 <__flash_rwdata_start+0xffffd184>
    {
      *to++ = *from++;
    }
  }
}
 40206b4:	0001883a 	nop
 40206b8:	e037883a 	mov	sp,fp
 40206bc:	df000017 	ldw	fp,0(sp)
 40206c0:	dec00104 	addi	sp,sp,4
 40206c4:	f800283a 	ret

040206c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40206c8:	defffe04 	addi	sp,sp,-8
 40206cc:	dfc00115 	stw	ra,4(sp)
 40206d0:	df000015 	stw	fp,0(sp)
 40206d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40206d8:	01800034 	movhi	r6,0
 40206dc:	31811204 	addi	r6,r6,1096
 40206e0:	01400034 	movhi	r5,0
 40206e4:	29403404 	addi	r5,r5,208
 40206e8:	010100b4 	movhi	r4,1026
 40206ec:	210d4104 	addi	r4,r4,13572
 40206f0:	40206600 	call	4020660 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40206f4:	018100b4 	movhi	r6,1026
 40206f8:	31809104 	addi	r6,r6,580
 40206fc:	014100b4 	movhi	r5,1026
 4020700:	29400804 	addi	r5,r5,32
 4020704:	010100b4 	movhi	r4,1026
 4020708:	21000804 	addi	r4,r4,32
 402070c:	40206600 	call	4020660 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4020710:	01800034 	movhi	r6,0
 4020714:	31803404 	addi	r6,r6,208
 4020718:	01400034 	movhi	r5,0
 402071c:	29400004 	addi	r5,r5,0
 4020720:	010100b4 	movhi	r4,1026
 4020724:	210d0d04 	addi	r4,r4,13364
 4020728:	40206600 	call	4020660 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 402072c:	40220f00 	call	40220f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4020730:	40223940 	call	4022394 <alt_icache_flush_all>
}
 4020734:	0001883a 	nop
 4020738:	e037883a 	mov	sp,fp
 402073c:	dfc00117 	ldw	ra,4(sp)
 4020740:	df000017 	ldw	fp,0(sp)
 4020744:	dec00204 	addi	sp,sp,8
 4020748:	f800283a 	ret

0402074c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 402074c:	defffd04 	addi	sp,sp,-12
 4020750:	dfc00215 	stw	ra,8(sp)
 4020754:	df000115 	stw	fp,4(sp)
 4020758:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 402075c:	0009883a 	mov	r4,zero
 4020760:	40209600 	call	4020960 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4020764:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4020768:	40209980 	call	4020998 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 402076c:	01800034 	movhi	r6,0
 4020770:	31801804 	addi	r6,r6,96
 4020774:	01400034 	movhi	r5,0
 4020778:	29401804 	addi	r5,r5,96
 402077c:	01000034 	movhi	r4,0
 4020780:	21001804 	addi	r4,r4,96
 4020784:	402272c0 	call	402272c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4020788:	40222440 	call	4022244 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 402078c:	010100b4 	movhi	r4,1026
 4020790:	2108a904 	addi	r4,r4,8868
 4020794:	4022f000 	call	4022f00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4020798:	d0a00c17 	ldw	r2,-32720(gp)
 402079c:	d0e00d17 	ldw	r3,-32716(gp)
 40207a0:	d1200e17 	ldw	r4,-32712(gp)
 40207a4:	200d883a 	mov	r6,r4
 40207a8:	180b883a 	mov	r5,r3
 40207ac:	1009883a 	mov	r4,r2
 40207b0:	40202900 	call	4020290 <main>
 40207b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 40207b8:	01000044 	movi	r4,1
 40207bc:	40220200 	call	4022020 <close>
  exit (result);
 40207c0:	e13fff17 	ldw	r4,-4(fp)
 40207c4:	4022f140 	call	4022f14 <exit>

040207c8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40207c8:	defffd04 	addi	sp,sp,-12
 40207cc:	dfc00215 	stw	ra,8(sp)
 40207d0:	df000115 	stw	fp,4(sp)
 40207d4:	df000104 	addi	fp,sp,4
 40207d8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 40207dc:	e13fff17 	ldw	r4,-4(fp)
 40207e0:	4021e8c0 	call	4021e8c <alt_busy_sleep>
}
 40207e4:	e037883a 	mov	sp,fp
 40207e8:	dfc00117 	ldw	ra,4(sp)
 40207ec:	df000017 	ldw	fp,0(sp)
 40207f0:	dec00204 	addi	sp,sp,8
 40207f4:	f800283a 	ret

040207f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40207f8:	defffe04 	addi	sp,sp,-8
 40207fc:	dfc00115 	stw	ra,4(sp)
 4020800:	df000015 	stw	fp,0(sp)
 4020804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4020808:	d0a00717 	ldw	r2,-32740(gp)
 402080c:	10000326 	beq	r2,zero,402081c <alt_get_errno+0x24>
 4020810:	d0a00717 	ldw	r2,-32740(gp)
 4020814:	103ee83a 	callr	r2
 4020818:	00000106 	br	4020820 <alt_get_errno+0x28>
 402081c:	d0a00b04 	addi	r2,gp,-32724
}
 4020820:	e037883a 	mov	sp,fp
 4020824:	dfc00117 	ldw	ra,4(sp)
 4020828:	df000017 	ldw	fp,0(sp)
 402082c:	dec00204 	addi	sp,sp,8
 4020830:	f800283a 	ret

04020834 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4020834:	defff904 	addi	sp,sp,-28
 4020838:	dfc00615 	stw	ra,24(sp)
 402083c:	df000515 	stw	fp,20(sp)
 4020840:	df000504 	addi	fp,sp,20
 4020844:	e13ffd15 	stw	r4,-12(fp)
 4020848:	e17ffe15 	stw	r5,-8(fp)
 402084c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4020850:	e0bffd17 	ldw	r2,-12(fp)
 4020854:	10000616 	blt	r2,zero,4020870 <write+0x3c>
 4020858:	e0bffd17 	ldw	r2,-12(fp)
 402085c:	10c00324 	muli	r3,r2,12
 4020860:	00800034 	movhi	r2,0
 4020864:	1080a704 	addi	r2,r2,668
 4020868:	1885883a 	add	r2,r3,r2
 402086c:	00000106 	br	4020874 <write+0x40>
 4020870:	0005883a 	mov	r2,zero
 4020874:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4020878:	e0bffb17 	ldw	r2,-20(fp)
 402087c:	10002126 	beq	r2,zero,4020904 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4020880:	e0bffb17 	ldw	r2,-20(fp)
 4020884:	10800217 	ldw	r2,8(r2)
 4020888:	108000cc 	andi	r2,r2,3
 402088c:	10001826 	beq	r2,zero,40208f0 <write+0xbc>
 4020890:	e0bffb17 	ldw	r2,-20(fp)
 4020894:	10800017 	ldw	r2,0(r2)
 4020898:	10800617 	ldw	r2,24(r2)
 402089c:	10001426 	beq	r2,zero,40208f0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40208a0:	e0bffb17 	ldw	r2,-20(fp)
 40208a4:	10800017 	ldw	r2,0(r2)
 40208a8:	10800617 	ldw	r2,24(r2)
 40208ac:	e0ffff17 	ldw	r3,-4(fp)
 40208b0:	180d883a 	mov	r6,r3
 40208b4:	e17ffe17 	ldw	r5,-8(fp)
 40208b8:	e13ffb17 	ldw	r4,-20(fp)
 40208bc:	103ee83a 	callr	r2
 40208c0:	e0bffc15 	stw	r2,-16(fp)
 40208c4:	e0bffc17 	ldw	r2,-16(fp)
 40208c8:	1000070e 	bge	r2,zero,40208e8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 40208cc:	40207f80 	call	40207f8 <alt_get_errno>
 40208d0:	1007883a 	mov	r3,r2
 40208d4:	e0bffc17 	ldw	r2,-16(fp)
 40208d8:	0085c83a 	sub	r2,zero,r2
 40208dc:	18800015 	stw	r2,0(r3)
        return -1;
 40208e0:	00bfffc4 	movi	r2,-1
 40208e4:	00000c06 	br	4020918 <write+0xe4>
      }
      return rval;
 40208e8:	e0bffc17 	ldw	r2,-16(fp)
 40208ec:	00000a06 	br	4020918 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40208f0:	40207f80 	call	40207f8 <alt_get_errno>
 40208f4:	1007883a 	mov	r3,r2
 40208f8:	00800344 	movi	r2,13
 40208fc:	18800015 	stw	r2,0(r3)
 4020900:	00000406 	br	4020914 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4020904:	40207f80 	call	40207f8 <alt_get_errno>
 4020908:	1007883a 	mov	r3,r2
 402090c:	00801444 	movi	r2,81
 4020910:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4020914:	00bfffc4 	movi	r2,-1
}
 4020918:	e037883a 	mov	sp,fp
 402091c:	dfc00117 	ldw	ra,4(sp)
 4020920:	df000017 	ldw	fp,0(sp)
 4020924:	dec00204 	addi	sp,sp,8
 4020928:	f800283a 	ret

0402092c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402092c:	defffd04 	addi	sp,sp,-12
 4020930:	dfc00215 	stw	ra,8(sp)
 4020934:	df000115 	stw	fp,4(sp)
 4020938:	df000104 	addi	fp,sp,4
 402093c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4020940:	d1600404 	addi	r5,gp,-32752
 4020944:	e13fff17 	ldw	r4,-4(fp)
 4020948:	40221a00 	call	40221a0 <alt_dev_llist_insert>
}
 402094c:	e037883a 	mov	sp,fp
 4020950:	dfc00117 	ldw	ra,4(sp)
 4020954:	df000017 	ldw	fp,0(sp)
 4020958:	dec00204 	addi	sp,sp,8
 402095c:	f800283a 	ret

04020960 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4020960:	defffd04 	addi	sp,sp,-12
 4020964:	dfc00215 	stw	ra,8(sp)
 4020968:	df000115 	stw	fp,4(sp)
 402096c:	df000104 	addi	fp,sp,4
 4020970:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4020974:	4022c040 	call	4022c04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4020978:	00800044 	movi	r2,1
 402097c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4020980:	0001883a 	nop
 4020984:	e037883a 	mov	sp,fp
 4020988:	dfc00117 	ldw	ra,4(sp)
 402098c:	df000017 	ldw	fp,0(sp)
 4020990:	dec00204 	addi	sp,sp,8
 4020994:	f800283a 	ret

04020998 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4020998:	defffd04 	addi	sp,sp,-12
 402099c:	dfc00215 	stw	ra,8(sp)
 40209a0:	df000115 	stw	fp,4(sp)
 40209a4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 40209a8:	01c0fa04 	movi	r7,1000
 40209ac:	01800044 	movi	r6,1
 40209b0:	000b883a 	mov	r5,zero
 40209b4:	01010134 	movhi	r4,1028
 40209b8:	21040004 	addi	r4,r4,4096
 40209bc:	4020f5c0 	call	4020f5c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40209c0:	01000034 	movhi	r4,0
 40209c4:	21006c04 	addi	r4,r4,432
 40209c8:	402092c0 	call	402092c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 40209cc:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 40209d0:	00800034 	movhi	r2,0
 40209d4:	10807704 	addi	r2,r2,476
 40209d8:	10800a17 	ldw	r2,40(r2)
 40209dc:	10800017 	ldw	r2,0(r2)
 40209e0:	1007883a 	mov	r3,r2
 40209e4:	00800034 	movhi	r2,0
 40209e8:	10807704 	addi	r2,r2,476
 40209ec:	10c00b15 	stw	r3,44(r2)
 40209f0:	00800034 	movhi	r2,0
 40209f4:	10807704 	addi	r2,r2,476
 40209f8:	10800a17 	ldw	r2,40(r2)
 40209fc:	10800104 	addi	r2,r2,4
 4020a00:	10800017 	ldw	r2,0(r2)
 4020a04:	1007883a 	mov	r3,r2
 4020a08:	00800034 	movhi	r2,0
 4020a0c:	10807704 	addi	r2,r2,476
 4020a10:	10c00c15 	stw	r3,48(r2)
 4020a14:	00800034 	movhi	r2,0
 4020a18:	10807704 	addi	r2,r2,476
 4020a1c:	10800a17 	ldw	r2,40(r2)
 4020a20:	10800204 	addi	r2,r2,8
 4020a24:	10800017 	ldw	r2,0(r2)
 4020a28:	10ffffcc 	andi	r3,r2,65535
 4020a2c:	00800034 	movhi	r2,0
 4020a30:	10807704 	addi	r2,r2,476
 4020a34:	10c00f15 	stw	r3,60(r2)
 4020a38:	00800034 	movhi	r2,0
 4020a3c:	10807704 	addi	r2,r2,476
 4020a40:	10800a17 	ldw	r2,40(r2)
 4020a44:	10800204 	addi	r2,r2,8
 4020a48:	10800017 	ldw	r2,0(r2)
 4020a4c:	1006d43a 	srli	r3,r2,16
 4020a50:	00800034 	movhi	r2,0
 4020a54:	10807704 	addi	r2,r2,476
 4020a58:	10c01015 	stw	r3,64(r2)
 4020a5c:	00800034 	movhi	r2,0
 4020a60:	10807704 	addi	r2,r2,476
 4020a64:	10800a17 	ldw	r2,40(r2)
 4020a68:	10800304 	addi	r2,r2,12
 4020a6c:	10800017 	ldw	r2,0(r2)
 4020a70:	1005d07a 	srai	r2,r2,1
 4020a74:	10c0004c 	andi	r3,r2,1
 4020a78:	00800034 	movhi	r2,0
 4020a7c:	10807704 	addi	r2,r2,476
 4020a80:	10c00d15 	stw	r3,52(r2)
 4020a84:	00800034 	movhi	r2,0
 4020a88:	10807704 	addi	r2,r2,476
 4020a8c:	10800a17 	ldw	r2,40(r2)
 4020a90:	10800304 	addi	r2,r2,12
 4020a94:	10800017 	ldw	r2,0(r2)
 4020a98:	1005d13a 	srai	r2,r2,4
 4020a9c:	10c003cc 	andi	r3,r2,15
 4020aa0:	00800034 	movhi	r2,0
 4020aa4:	10807704 	addi	r2,r2,476
 4020aa8:	10c00e15 	stw	r3,56(r2)
 4020aac:	00800034 	movhi	r2,0
 4020ab0:	10807704 	addi	r2,r2,476
 4020ab4:	10800a17 	ldw	r2,40(r2)
 4020ab8:	10800304 	addi	r2,r2,12
 4020abc:	10800017 	ldw	r2,0(r2)
 4020ac0:	1005d43a 	srai	r2,r2,16
 4020ac4:	e0bfff05 	stb	r2,-4(fp)
 4020ac8:	00800034 	movhi	r2,0
 4020acc:	10807704 	addi	r2,r2,476
 4020ad0:	10800a17 	ldw	r2,40(r2)
 4020ad4:	10800304 	addi	r2,r2,12
 4020ad8:	10800017 	ldw	r2,0(r2)
 4020adc:	1004d63a 	srli	r2,r2,24
 4020ae0:	e0bfff45 	stb	r2,-3(fp)
 4020ae4:	00800034 	movhi	r2,0
 4020ae8:	10807704 	addi	r2,r2,476
 4020aec:	10800e17 	ldw	r2,56(r2)
 4020af0:	10800058 	cmpnei	r2,r2,1
 4020af4:	1000041e 	bne	r2,zero,4020b08 <alt_sys_init+0x170>
 4020af8:	00800034 	movhi	r2,0
 4020afc:	10807704 	addi	r2,r2,476
 4020b00:	10001115 	stw	zero,68(r2)
 4020b04:	00000e06 	br	4020b40 <alt_sys_init+0x1a8>
 4020b08:	00800034 	movhi	r2,0
 4020b0c:	10807704 	addi	r2,r2,476
 4020b10:	10800e17 	ldw	r2,56(r2)
 4020b14:	10800098 	cmpnei	r2,r2,2
 4020b18:	1000051e 	bne	r2,zero,4020b30 <alt_sys_init+0x198>
 4020b1c:	00800034 	movhi	r2,0
 4020b20:	10807704 	addi	r2,r2,476
 4020b24:	00c00044 	movi	r3,1
 4020b28:	10c01115 	stw	r3,68(r2)
 4020b2c:	00000406 	br	4020b40 <alt_sys_init+0x1a8>
 4020b30:	00800034 	movhi	r2,0
 4020b34:	10807704 	addi	r2,r2,476
 4020b38:	00c00084 	movi	r3,2
 4020b3c:	10c01115 	stw	r3,68(r2)
 4020b40:	e0bfff03 	ldbu	r2,-4(fp)
 4020b44:	00c00804 	movi	r3,32
 4020b48:	1885c83a 	sub	r2,r3,r2
 4020b4c:	00ffffc4 	movi	r3,-1
 4020b50:	1886d83a 	srl	r3,r3,r2
 4020b54:	00800034 	movhi	r2,0
 4020b58:	10807704 	addi	r2,r2,476
 4020b5c:	10c01215 	stw	r3,72(r2)
 4020b60:	e0ffff03 	ldbu	r3,-4(fp)
 4020b64:	00800034 	movhi	r2,0
 4020b68:	10807704 	addi	r2,r2,476
 4020b6c:	10801117 	ldw	r2,68(r2)
 4020b70:	1887883a 	add	r3,r3,r2
 4020b74:	00800034 	movhi	r2,0
 4020b78:	10807704 	addi	r2,r2,476
 4020b7c:	10c01315 	stw	r3,76(r2)
 4020b80:	e0bfff43 	ldbu	r2,-3(fp)
 4020b84:	00c00804 	movi	r3,32
 4020b88:	1885c83a 	sub	r2,r3,r2
 4020b8c:	00ffffc4 	movi	r3,-1
 4020b90:	1886d83a 	srl	r3,r3,r2
 4020b94:	00800034 	movhi	r2,0
 4020b98:	10807704 	addi	r2,r2,476
 4020b9c:	10c01415 	stw	r3,80(r2)
 4020ba0:	01000034 	movhi	r4,0
 4020ba4:	21007704 	addi	r4,r4,476
 4020ba8:	402092c0 	call	402092c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
 4020bac:	00800034 	movhi	r2,0
 4020bb0:	10808c04 	addi	r2,r2,560
 4020bb4:	10800a17 	ldw	r2,40(r2)
 4020bb8:	10800017 	ldw	r2,0(r2)
 4020bbc:	10c003cc 	andi	r3,r2,15
 4020bc0:	00800034 	movhi	r2,0
 4020bc4:	10808c04 	addi	r2,r2,560
 4020bc8:	10c00b15 	stw	r3,44(r2)
 4020bcc:	00800034 	movhi	r2,0
 4020bd0:	10808c04 	addi	r2,r2,560
 4020bd4:	10800a17 	ldw	r2,40(r2)
 4020bd8:	10800017 	ldw	r2,0(r2)
 4020bdc:	1005d13a 	srai	r2,r2,4
 4020be0:	10c0004c 	andi	r3,r2,1
 4020be4:	00800034 	movhi	r2,0
 4020be8:	10808c04 	addi	r2,r2,560
 4020bec:	10c00c15 	stw	r3,48(r2)
 4020bf0:	00800034 	movhi	r2,0
 4020bf4:	10808c04 	addi	r2,r2,560
 4020bf8:	10800a17 	ldw	r2,40(r2)
 4020bfc:	10800017 	ldw	r2,0(r2)
 4020c00:	1005d17a 	srai	r2,r2,5
 4020c04:	10c0004c 	andi	r3,r2,1
 4020c08:	00800034 	movhi	r2,0
 4020c0c:	10808c04 	addi	r2,r2,560
 4020c10:	10c00d15 	stw	r3,52(r2)
 4020c14:	00800034 	movhi	r2,0
 4020c18:	10808c04 	addi	r2,r2,560
 4020c1c:	10800a17 	ldw	r2,40(r2)
 4020c20:	10800017 	ldw	r2,0(r2)
 4020c24:	1005d43a 	srai	r2,r2,16
 4020c28:	10c003cc 	andi	r3,r2,15
 4020c2c:	00800034 	movhi	r2,0
 4020c30:	10808c04 	addi	r2,r2,560
 4020c34:	10c00e15 	stw	r3,56(r2)
 4020c38:	00800034 	movhi	r2,0
 4020c3c:	10808c04 	addi	r2,r2,560
 4020c40:	10800a17 	ldw	r2,40(r2)
 4020c44:	10800017 	ldw	r2,0(r2)
 4020c48:	1005d53a 	srai	r2,r2,20
 4020c4c:	10c0004c 	andi	r3,r2,1
 4020c50:	00800034 	movhi	r2,0
 4020c54:	10808c04 	addi	r2,r2,560
 4020c58:	10c00f15 	stw	r3,60(r2)
 4020c5c:	00800034 	movhi	r2,0
 4020c60:	10808c04 	addi	r2,r2,560
 4020c64:	10800a17 	ldw	r2,40(r2)
 4020c68:	10800017 	ldw	r2,0(r2)
 4020c6c:	1005d57a 	srai	r2,r2,21
 4020c70:	10c0004c 	andi	r3,r2,1
 4020c74:	00800034 	movhi	r2,0
 4020c78:	10808c04 	addi	r2,r2,560
 4020c7c:	10c01015 	stw	r3,64(r2)
 4020c80:	01000034 	movhi	r4,0
 4020c84:	21008c04 	addi	r4,r4,560
 4020c88:	402092c0 	call	402092c <alt_dev_reg>
}
 4020c8c:	0001883a 	nop
 4020c90:	e037883a 	mov	sp,fp
 4020c94:	dfc00117 	ldw	ra,4(sp)
 4020c98:	df000017 	ldw	fp,0(sp)
 4020c9c:	dec00204 	addi	sp,sp,8
 4020ca0:	f800283a 	ret

04020ca4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4020ca4:	defffa04 	addi	sp,sp,-24
 4020ca8:	dfc00515 	stw	ra,20(sp)
 4020cac:	df000415 	stw	fp,16(sp)
 4020cb0:	df000404 	addi	fp,sp,16
 4020cb4:	e13ffd15 	stw	r4,-12(fp)
 4020cb8:	e17ffe15 	stw	r5,-8(fp)
 4020cbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4020cc0:	e0bffd17 	ldw	r2,-12(fp)
 4020cc4:	10800017 	ldw	r2,0(r2)
 4020cc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4020ccc:	e0bffc17 	ldw	r2,-16(fp)
 4020cd0:	10c00a04 	addi	r3,r2,40
 4020cd4:	e0bffd17 	ldw	r2,-12(fp)
 4020cd8:	10800217 	ldw	r2,8(r2)
 4020cdc:	100f883a 	mov	r7,r2
 4020ce0:	e1bfff17 	ldw	r6,-4(fp)
 4020ce4:	e17ffe17 	ldw	r5,-8(fp)
 4020ce8:	1809883a 	mov	r4,r3
 4020cec:	4020d640 	call	4020d64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4020cf0:	e037883a 	mov	sp,fp
 4020cf4:	dfc00117 	ldw	ra,4(sp)
 4020cf8:	df000017 	ldw	fp,0(sp)
 4020cfc:	dec00204 	addi	sp,sp,8
 4020d00:	f800283a 	ret

04020d04 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4020d04:	defffa04 	addi	sp,sp,-24
 4020d08:	dfc00515 	stw	ra,20(sp)
 4020d0c:	df000415 	stw	fp,16(sp)
 4020d10:	df000404 	addi	fp,sp,16
 4020d14:	e13ffd15 	stw	r4,-12(fp)
 4020d18:	e17ffe15 	stw	r5,-8(fp)
 4020d1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4020d20:	e0bffd17 	ldw	r2,-12(fp)
 4020d24:	10800017 	ldw	r2,0(r2)
 4020d28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4020d2c:	e0bffc17 	ldw	r2,-16(fp)
 4020d30:	10c00a04 	addi	r3,r2,40
 4020d34:	e0bffd17 	ldw	r2,-12(fp)
 4020d38:	10800217 	ldw	r2,8(r2)
 4020d3c:	100f883a 	mov	r7,r2
 4020d40:	e1bfff17 	ldw	r6,-4(fp)
 4020d44:	e17ffe17 	ldw	r5,-8(fp)
 4020d48:	1809883a 	mov	r4,r3
 4020d4c:	4020e500 	call	4020e50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4020d50:	e037883a 	mov	sp,fp
 4020d54:	dfc00117 	ldw	ra,4(sp)
 4020d58:	df000017 	ldw	fp,0(sp)
 4020d5c:	dec00204 	addi	sp,sp,8
 4020d60:	f800283a 	ret

04020d64 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 4020d64:	defff704 	addi	sp,sp,-36
 4020d68:	df000815 	stw	fp,32(sp)
 4020d6c:	df000804 	addi	fp,sp,32
 4020d70:	e13ffc15 	stw	r4,-16(fp)
 4020d74:	e17ffd15 	stw	r5,-12(fp)
 4020d78:	e1bffe15 	stw	r6,-8(fp)
 4020d7c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4020d80:	e0bffc17 	ldw	r2,-16(fp)
 4020d84:	10800017 	ldw	r2,0(r2)
 4020d88:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 4020d8c:	e0bffd17 	ldw	r2,-12(fp)
 4020d90:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 4020d94:	e0bffe17 	ldw	r2,-8(fp)
 4020d98:	e0fffd17 	ldw	r3,-12(fp)
 4020d9c:	1885883a 	add	r2,r3,r2
 4020da0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 4020da4:	00001206 	br	4020df0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4020da8:	e0bff917 	ldw	r2,-28(fp)
 4020dac:	10800037 	ldwio	r2,0(r2)
 4020db0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 4020db4:	e0bffb17 	ldw	r2,-20(fp)
 4020db8:	10a0000c 	andi	r2,r2,32768
 4020dbc:	10000626 	beq	r2,zero,4020dd8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4020dc0:	e0bff817 	ldw	r2,-32(fp)
 4020dc4:	10c00044 	addi	r3,r2,1
 4020dc8:	e0fff815 	stw	r3,-32(fp)
 4020dcc:	e0fffb17 	ldw	r3,-20(fp)
 4020dd0:	10c00005 	stb	r3,0(r2)
 4020dd4:	00000606 	br	4020df0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 4020dd8:	e0fff817 	ldw	r3,-32(fp)
 4020ddc:	e0bffd17 	ldw	r2,-12(fp)
 4020de0:	1880071e 	bne	r3,r2,4020e00 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 4020de4:	e0bfff17 	ldw	r2,-4(fp)
 4020de8:	1090000c 	andi	r2,r2,16384
 4020dec:	1000061e 	bne	r2,zero,4020e08 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4020df0:	e0fff817 	ldw	r3,-32(fp)
 4020df4:	e0bffa17 	ldw	r2,-24(fp)
 4020df8:	18bfeb36 	bltu	r3,r2,4020da8 <__flash_rwdata_start+0xffffd8a4>
 4020dfc:	00000306 	br	4020e0c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 4020e00:	0001883a 	nop
 4020e04:	00000106 	br	4020e0c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 4020e08:	0001883a 	nop
    
  }

  if (ptr != buffer)
 4020e0c:	e0fff817 	ldw	r3,-32(fp)
 4020e10:	e0bffd17 	ldw	r2,-12(fp)
 4020e14:	18800426 	beq	r3,r2,4020e28 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 4020e18:	e0fff817 	ldw	r3,-32(fp)
 4020e1c:	e0bffd17 	ldw	r2,-12(fp)
 4020e20:	1885c83a 	sub	r2,r3,r2
 4020e24:	00000606 	br	4020e40 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 4020e28:	e0bfff17 	ldw	r2,-4(fp)
 4020e2c:	1090000c 	andi	r2,r2,16384
 4020e30:	10000226 	beq	r2,zero,4020e3c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 4020e34:	00bffd44 	movi	r2,-11
 4020e38:	00000106 	br	4020e40 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 4020e3c:	00bffec4 	movi	r2,-5
}
 4020e40:	e037883a 	mov	sp,fp
 4020e44:	df000017 	ldw	fp,0(sp)
 4020e48:	dec00104 	addi	sp,sp,4
 4020e4c:	f800283a 	ret

04020e50 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4020e50:	defff904 	addi	sp,sp,-28
 4020e54:	df000615 	stw	fp,24(sp)
 4020e58:	df000604 	addi	fp,sp,24
 4020e5c:	e13ffc15 	stw	r4,-16(fp)
 4020e60:	e17ffd15 	stw	r5,-12(fp)
 4020e64:	e1bffe15 	stw	r6,-8(fp)
 4020e68:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4020e6c:	e0bffc17 	ldw	r2,-16(fp)
 4020e70:	10800017 	ldw	r2,0(r2)
 4020e74:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 4020e78:	e0bffe17 	ldw	r2,-8(fp)
 4020e7c:	e0fffd17 	ldw	r3,-12(fp)
 4020e80:	1885883a 	add	r2,r3,r2
 4020e84:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 4020e88:	00000e06 	br	4020ec4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4020e8c:	e0bffa17 	ldw	r2,-24(fp)
 4020e90:	10800104 	addi	r2,r2,4
 4020e94:	10800037 	ldwio	r2,0(r2)
 4020e98:	10bfffec 	andhi	r2,r2,65535
 4020e9c:	10000926 	beq	r2,zero,4020ec4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4020ea0:	e0fffa17 	ldw	r3,-24(fp)
 4020ea4:	e0bffd17 	ldw	r2,-12(fp)
 4020ea8:	11000044 	addi	r4,r2,1
 4020eac:	e13ffd15 	stw	r4,-12(fp)
 4020eb0:	10800003 	ldbu	r2,0(r2)
 4020eb4:	10803fcc 	andi	r2,r2,255
 4020eb8:	1080201c 	xori	r2,r2,128
 4020ebc:	10bfe004 	addi	r2,r2,-128
 4020ec0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4020ec4:	e0fffd17 	ldw	r3,-12(fp)
 4020ec8:	e0bffb17 	ldw	r2,-20(fp)
 4020ecc:	18bfef36 	bltu	r3,r2,4020e8c <__flash_rwdata_start+0xffffd988>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4020ed0:	e0bffe17 	ldw	r2,-8(fp)
}
 4020ed4:	e037883a 	mov	sp,fp
 4020ed8:	df000017 	ldw	fp,0(sp)
 4020edc:	dec00104 	addi	sp,sp,4
 4020ee0:	f800283a 	ret

04020ee4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4020ee4:	defffa04 	addi	sp,sp,-24
 4020ee8:	dfc00515 	stw	ra,20(sp)
 4020eec:	df000415 	stw	fp,16(sp)
 4020ef0:	df000404 	addi	fp,sp,16
 4020ef4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4020ef8:	0007883a 	mov	r3,zero
 4020efc:	e0bfff17 	ldw	r2,-4(fp)
 4020f00:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4020f04:	e0bfff17 	ldw	r2,-4(fp)
 4020f08:	10800104 	addi	r2,r2,4
 4020f0c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4020f10:	0005303a 	rdctl	r2,status
 4020f14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4020f18:	e0fffd17 	ldw	r3,-12(fp)
 4020f1c:	00bfff84 	movi	r2,-2
 4020f20:	1884703a 	and	r2,r3,r2
 4020f24:	1001703a 	wrctl	status,r2
  
  return context;
 4020f28:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4020f2c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4020f30:	4022afc0 	call	4022afc <alt_tick>
 4020f34:	e0bffc17 	ldw	r2,-16(fp)
 4020f38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4020f3c:	e0bffe17 	ldw	r2,-8(fp)
 4020f40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4020f44:	0001883a 	nop
 4020f48:	e037883a 	mov	sp,fp
 4020f4c:	dfc00117 	ldw	ra,4(sp)
 4020f50:	df000017 	ldw	fp,0(sp)
 4020f54:	dec00204 	addi	sp,sp,8
 4020f58:	f800283a 	ret

04020f5c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4020f5c:	defff804 	addi	sp,sp,-32
 4020f60:	dfc00715 	stw	ra,28(sp)
 4020f64:	df000615 	stw	fp,24(sp)
 4020f68:	df000604 	addi	fp,sp,24
 4020f6c:	e13ffc15 	stw	r4,-16(fp)
 4020f70:	e17ffd15 	stw	r5,-12(fp)
 4020f74:	e1bffe15 	stw	r6,-8(fp)
 4020f78:	e1ffff15 	stw	r7,-4(fp)
 4020f7c:	e0bfff17 	ldw	r2,-4(fp)
 4020f80:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4020f84:	d0a01017 	ldw	r2,-32704(gp)
 4020f88:	1000021e 	bne	r2,zero,4020f94 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4020f8c:	e0bffb17 	ldw	r2,-20(fp)
 4020f90:	d0a01015 	stw	r2,-32704(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4020f94:	e0bffc17 	ldw	r2,-16(fp)
 4020f98:	10800104 	addi	r2,r2,4
 4020f9c:	00c001c4 	movi	r3,7
 4020fa0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4020fa4:	d8000015 	stw	zero,0(sp)
 4020fa8:	e1fffc17 	ldw	r7,-16(fp)
 4020fac:	018100b4 	movhi	r6,1026
 4020fb0:	3183b904 	addi	r6,r6,3812
 4020fb4:	e17ffe17 	ldw	r5,-8(fp)
 4020fb8:	e13ffd17 	ldw	r4,-12(fp)
 4020fbc:	40223c80 	call	40223c8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4020fc0:	0001883a 	nop
 4020fc4:	e037883a 	mov	sp,fp
 4020fc8:	dfc00117 	ldw	ra,4(sp)
 4020fcc:	df000017 	ldw	fp,0(sp)
 4020fd0:	dec00204 	addi	sp,sp,8
 4020fd4:	f800283a 	ret

04020fd8 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 4020fd8:	defffc04 	addi	sp,sp,-16
 4020fdc:	dfc00315 	stw	ra,12(sp)
 4020fe0:	df000215 	stw	fp,8(sp)
 4020fe4:	df000204 	addi	fp,sp,8
 4020fe8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 4020fec:	d1600404 	addi	r5,gp,-32752
 4020ff0:	e13fff17 	ldw	r4,-4(fp)
 4020ff4:	40223040 	call	4022304 <alt_find_dev>
 4020ff8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 4020ffc:	e0bffe17 	ldw	r2,-8(fp)
}
 4021000:	e037883a 	mov	sp,fp
 4021004:	dfc00117 	ldw	ra,4(sp)
 4021008:	df000017 	ldw	fp,0(sp)
 402100c:	dec00204 	addi	sp,sp,8
 4021010:	f800283a 	ret

04021014 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 4021014:	defffa04 	addi	sp,sp,-24
 4021018:	df000515 	stw	fp,20(sp)
 402101c:	df000504 	addi	fp,sp,20
 4021020:	e13ffc15 	stw	r4,-16(fp)
 4021024:	e17ffd15 	stw	r5,-12(fp)
 4021028:	e1bffe15 	stw	r6,-8(fp)
 402102c:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 4021030:	e0bffc17 	ldw	r2,-16(fp)
 4021034:	10800f17 	ldw	r2,60(r2)
 4021038:	e0fffe17 	ldw	r3,-8(fp)
 402103c:	1880042e 	bgeu	r3,r2,4021050 <alt_up_pixel_buffer_dma_draw+0x3c>
 4021040:	e0bffc17 	ldw	r2,-16(fp)
 4021044:	10801017 	ldw	r2,64(r2)
 4021048:	e0ffff17 	ldw	r3,-4(fp)
 402104c:	18800236 	bltu	r3,r2,4021058 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 4021050:	00bfffc4 	movi	r2,-1
 4021054:	00005006 	br	4021198 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 4021058:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 402105c:	e0bffc17 	ldw	r2,-16(fp)
 4021060:	10800d17 	ldw	r2,52(r2)
 4021064:	1000151e 	bne	r2,zero,40210bc <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 4021068:	e0bffc17 	ldw	r2,-16(fp)
 402106c:	10c01217 	ldw	r3,72(r2)
 4021070:	e0bffe17 	ldw	r2,-8(fp)
 4021074:	1886703a 	and	r3,r3,r2
 4021078:	e0bffc17 	ldw	r2,-16(fp)
 402107c:	10801117 	ldw	r2,68(r2)
 4021080:	1884983a 	sll	r2,r3,r2
 4021084:	e0fffb17 	ldw	r3,-20(fp)
 4021088:	1885883a 	add	r2,r3,r2
 402108c:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 4021090:	e0bffc17 	ldw	r2,-16(fp)
 4021094:	10c01417 	ldw	r3,80(r2)
 4021098:	e0bfff17 	ldw	r2,-4(fp)
 402109c:	1886703a 	and	r3,r3,r2
 40210a0:	e0bffc17 	ldw	r2,-16(fp)
 40210a4:	10801317 	ldw	r2,76(r2)
 40210a8:	1884983a 	sll	r2,r3,r2
 40210ac:	e0fffb17 	ldw	r3,-20(fp)
 40210b0:	1885883a 	add	r2,r3,r2
 40210b4:	e0bffb15 	stw	r2,-20(fp)
 40210b8:	00001706 	br	4021118 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 40210bc:	e0bffc17 	ldw	r2,-16(fp)
 40210c0:	10c01217 	ldw	r3,72(r2)
 40210c4:	e0bffe17 	ldw	r2,-8(fp)
 40210c8:	1886703a 	and	r3,r3,r2
 40210cc:	e0bffc17 	ldw	r2,-16(fp)
 40210d0:	10801117 	ldw	r2,68(r2)
 40210d4:	1884983a 	sll	r2,r3,r2
 40210d8:	e0fffb17 	ldw	r3,-20(fp)
 40210dc:	1885883a 	add	r2,r3,r2
 40210e0:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 40210e4:	e0bffc17 	ldw	r2,-16(fp)
 40210e8:	10c01417 	ldw	r3,80(r2)
 40210ec:	e0bfff17 	ldw	r2,-4(fp)
 40210f0:	1886703a 	and	r3,r3,r2
 40210f4:	e0bffc17 	ldw	r2,-16(fp)
 40210f8:	10800f17 	ldw	r2,60(r2)
 40210fc:	1887383a 	mul	r3,r3,r2
 4021100:	e0bffc17 	ldw	r2,-16(fp)
 4021104:	10801117 	ldw	r2,68(r2)
 4021108:	1884983a 	sll	r2,r3,r2
 402110c:	e0fffb17 	ldw	r3,-20(fp)
 4021110:	1885883a 	add	r2,r3,r2
 4021114:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4021118:	e0bffc17 	ldw	r2,-16(fp)
 402111c:	10800e17 	ldw	r2,56(r2)
 4021120:	10800058 	cmpnei	r2,r2,1
 4021124:	1000081e 	bne	r2,zero,4021148 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4021128:	e0bffc17 	ldw	r2,-16(fp)
 402112c:	10c00c17 	ldw	r3,48(r2)
 4021130:	e0bffb17 	ldw	r2,-20(fp)
 4021134:	1885883a 	add	r2,r3,r2
 4021138:	1007883a 	mov	r3,r2
 402113c:	e0bffd17 	ldw	r2,-12(fp)
 4021140:	18800025 	stbio	r2,0(r3)
 4021144:	00001306 	br	4021194 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4021148:	e0bffc17 	ldw	r2,-16(fp)
 402114c:	10800e17 	ldw	r2,56(r2)
 4021150:	10800098 	cmpnei	r2,r2,2
 4021154:	1000081e 	bne	r2,zero,4021178 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4021158:	e0bffc17 	ldw	r2,-16(fp)
 402115c:	10c00c17 	ldw	r3,48(r2)
 4021160:	e0bffb17 	ldw	r2,-20(fp)
 4021164:	1885883a 	add	r2,r3,r2
 4021168:	1007883a 	mov	r3,r2
 402116c:	e0bffd17 	ldw	r2,-12(fp)
 4021170:	1880002d 	sthio	r2,0(r3)
 4021174:	00000706 	br	4021194 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4021178:	e0bffc17 	ldw	r2,-16(fp)
 402117c:	10c00c17 	ldw	r3,48(r2)
 4021180:	e0bffb17 	ldw	r2,-20(fp)
 4021184:	1885883a 	add	r2,r3,r2
 4021188:	1007883a 	mov	r3,r2
 402118c:	e0bffd17 	ldw	r2,-12(fp)
 4021190:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 4021194:	0005883a 	mov	r2,zero
}
 4021198:	e037883a 	mov	sp,fp
 402119c:	df000017 	ldw	fp,0(sp)
 40211a0:	dec00104 	addi	sp,sp,4
 40211a4:	f800283a 	ret

040211a8 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 40211a8:	defffd04 	addi	sp,sp,-12
 40211ac:	df000215 	stw	fp,8(sp)
 40211b0:	df000204 	addi	fp,sp,8
 40211b4:	e13ffe15 	stw	r4,-8(fp)
 40211b8:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 40211bc:	e0bffe17 	ldw	r2,-8(fp)
 40211c0:	10800a17 	ldw	r2,40(r2)
 40211c4:	10800104 	addi	r2,r2,4
 40211c8:	1007883a 	mov	r3,r2
 40211cc:	e0bfff17 	ldw	r2,-4(fp)
 40211d0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 40211d4:	e0bffe17 	ldw	r2,-8(fp)
 40211d8:	10800a17 	ldw	r2,40(r2)
 40211dc:	10800104 	addi	r2,r2,4
 40211e0:	10800037 	ldwio	r2,0(r2)
 40211e4:	1007883a 	mov	r3,r2
 40211e8:	e0bffe17 	ldw	r2,-8(fp)
 40211ec:	10c00c15 	stw	r3,48(r2)
	return 0;
 40211f0:	0005883a 	mov	r2,zero
}
 40211f4:	e037883a 	mov	sp,fp
 40211f8:	df000017 	ldw	fp,0(sp)
 40211fc:	dec00104 	addi	sp,sp,4
 4021200:	f800283a 	ret

04021204 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 4021204:	defffd04 	addi	sp,sp,-12
 4021208:	df000215 	stw	fp,8(sp)
 402120c:	dc000115 	stw	r16,4(sp)
 4021210:	df000204 	addi	fp,sp,8
 4021214:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 4021218:	e0bffe17 	ldw	r2,-8(fp)
 402121c:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 4021220:	e0bffe17 	ldw	r2,-8(fp)
 4021224:	10800a17 	ldw	r2,40(r2)
 4021228:	1007883a 	mov	r3,r2
 402122c:	00800044 	movi	r2,1
 4021230:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 4021234:	e0bffe17 	ldw	r2,-8(fp)
 4021238:	10c00b17 	ldw	r3,44(r2)
 402123c:	e0bffe17 	ldw	r2,-8(fp)
 4021240:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 4021244:	e0bffe17 	ldw	r2,-8(fp)
 4021248:	14000b15 	stw	r16,44(r2)
	return 0;
 402124c:	0005883a 	mov	r2,zero
}
 4021250:	e6ffff04 	addi	sp,fp,-4
 4021254:	df000117 	ldw	fp,4(sp)
 4021258:	dc000017 	ldw	r16,0(sp)
 402125c:	dec00204 	addi	sp,sp,8
 4021260:	f800283a 	ret

04021264 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 4021264:	defffe04 	addi	sp,sp,-8
 4021268:	df000115 	stw	fp,4(sp)
 402126c:	df000104 	addi	fp,sp,4
 4021270:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 4021274:	e0bfff17 	ldw	r2,-4(fp)
 4021278:	10800a17 	ldw	r2,40(r2)
 402127c:	10800304 	addi	r2,r2,12
 4021280:	10800037 	ldwio	r2,0(r2)
 4021284:	1080004c 	andi	r2,r2,1
}
 4021288:	e037883a 	mov	sp,fp
 402128c:	df000017 	ldw	fp,0(sp)
 4021290:	dec00104 	addi	sp,sp,4
 4021294:	f800283a 	ret

04021298 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 4021298:	defff704 	addi	sp,sp,-36
 402129c:	df000815 	stw	fp,32(sp)
 40212a0:	dd400715 	stw	r21,28(sp)
 40212a4:	dd000615 	stw	r20,24(sp)
 40212a8:	dcc00515 	stw	r19,20(sp)
 40212ac:	dc800415 	stw	r18,16(sp)
 40212b0:	dc400315 	stw	r17,12(sp)
 40212b4:	dc000215 	stw	r16,8(sp)
 40212b8:	df000804 	addi	fp,sp,32
 40212bc:	e13ff815 	stw	r4,-32(fp)
 40212c0:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 40212c4:	e0bff917 	ldw	r2,-28(fp)
 40212c8:	10800058 	cmpnei	r2,r2,1
 40212cc:	1000031e 	bne	r2,zero,40212dc <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 40212d0:	e0bff817 	ldw	r2,-32(fp)
 40212d4:	14400c17 	ldw	r17,48(r2)
 40212d8:	00000206 	br	40212e4 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 40212dc:	e0bff817 	ldw	r2,-32(fp)
 40212e0:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 40212e4:	e0bff817 	ldw	r2,-32(fp)
 40212e8:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40212ec:	e0bff817 	ldw	r2,-32(fp)
 40212f0:	10800e17 	ldw	r2,56(r2)
 40212f4:	10800098 	cmpnei	r2,r2,2
 40212f8:	1000031e 	bne	r2,zero,4021308 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 40212fc:	8405883a 	add	r2,r16,r16
 4021300:	1021883a 	mov	r16,r2
 4021304:	00000306 	br	4021314 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 4021308:	8405883a 	add	r2,r16,r16
 402130c:	1085883a 	add	r2,r2,r2
 4021310:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 4021314:	e0bff817 	ldw	r2,-32(fp)
 4021318:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 402131c:	e0bff817 	ldw	r2,-32(fp)
 4021320:	10800d17 	ldw	r2,52(r2)
 4021324:	1000111e 	bne	r2,zero,402136c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4021328:	e0bff817 	ldw	r2,-32(fp)
 402132c:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 4021330:	0029883a 	mov	r20,zero
 4021334:	00000b06 	br	4021364 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
 4021338:	0027883a 	mov	r19,zero
 402133c:	00000406 	br	4021350 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 4021340:	9c45883a 	add	r2,r19,r17
 4021344:	0007883a 	mov	r3,zero
 4021348:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 402134c:	9cc00104 	addi	r19,r19,4
 4021350:	9c3ffb36 	bltu	r19,r16,4021340 <__flash_rwdata_start+0xffffde3c>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 4021354:	00800044 	movi	r2,1
 4021358:	1544983a 	sll	r2,r2,r21
 402135c:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 4021360:	a5000044 	addi	r20,r20,1
 4021364:	a4bff436 	bltu	r20,r18,4021338 <__flash_rwdata_start+0xffffde34>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4021368:	00000a06 	br	4021394 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 402136c:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 4021370:	0021883a 	mov	r16,zero
 4021374:	00000506 	br	402138c <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
 4021378:	8005883a 	mov	r2,r16
 402137c:	1445883a 	add	r2,r2,r17
 4021380:	0007883a 	mov	r3,zero
 4021384:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 4021388:	84000104 	addi	r16,r16,4
 402138c:	8005883a 	mov	r2,r16
 4021390:	14bff936 	bltu	r2,r18,4021378 <__flash_rwdata_start+0xffffde74>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4021394:	0001883a 	nop
 4021398:	e6fffa04 	addi	sp,fp,-24
 402139c:	df000617 	ldw	fp,24(sp)
 40213a0:	dd400517 	ldw	r21,20(sp)
 40213a4:	dd000417 	ldw	r20,16(sp)
 40213a8:	dcc00317 	ldw	r19,12(sp)
 40213ac:	dc800217 	ldw	r18,8(sp)
 40213b0:	dc400117 	ldw	r17,4(sp)
 40213b4:	dc000017 	ldw	r16,0(sp)
 40213b8:	dec00704 	addi	sp,sp,28
 40213bc:	f800283a 	ret

040213c0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 40213c0:	defff304 	addi	sp,sp,-52
 40213c4:	df000c15 	stw	fp,48(sp)
 40213c8:	ddc00b15 	stw	r23,44(sp)
 40213cc:	dd800a15 	stw	r22,40(sp)
 40213d0:	dd400915 	stw	r21,36(sp)
 40213d4:	dd000815 	stw	r20,32(sp)
 40213d8:	dcc00715 	stw	r19,28(sp)
 40213dc:	dc800615 	stw	r18,24(sp)
 40213e0:	dc400515 	stw	r17,20(sp)
 40213e4:	dc000415 	stw	r16,16(sp)
 40213e8:	df000c04 	addi	fp,sp,48
 40213ec:	e13ff415 	stw	r4,-48(fp)
 40213f0:	e17ff515 	stw	r5,-44(fp)
 40213f4:	e1bff615 	stw	r6,-40(fp)
 40213f8:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 40213fc:	e0bff417 	ldw	r2,-48(fp)
 4021400:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4021404:	e0bff417 	ldw	r2,-48(fp)
 4021408:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 402140c:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 4021410:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 4021414:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 4021418:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 402141c:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4021420:	a580032e 	bgeu	r20,r22,4021430 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 4021424:	b02b883a 	mov	r21,r22
		l_x = r_x;
 4021428:	a02d883a 	mov	r22,r20
		r_x = temp;
 402142c:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 4021430:	9c40032e 	bgeu	r19,r17,4021440 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 4021434:	882b883a 	mov	r21,r17
		t_y = b_y;
 4021438:	9823883a 	mov	r17,r19
		b_y = temp;
 402143c:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 4021440:	b480892e 	bgeu	r22,r18,4021668 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
 4021444:	8c00882e 	bgeu	r17,r16,4021668 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4021448:	a4800136 	bltu	r20,r18,4021450 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
 402144c:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4021450:	9c000136 	bltu	r19,r16,4021458 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
 4021454:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4021458:	e0800317 	ldw	r2,12(fp)
 402145c:	10800058 	cmpnei	r2,r2,1
 4021460:	1000031e 	bne	r2,zero,4021470 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
 4021464:	e0bff417 	ldw	r2,-48(fp)
 4021468:	14000c17 	ldw	r16,48(r2)
 402146c:	00000206 	br	4021478 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
 4021470:	e0bff417 	ldw	r2,-48(fp)
 4021474:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4021478:	e0bff417 	ldw	r2,-48(fp)
 402147c:	10800d17 	ldw	r2,52(r2)
 4021480:	10003c1e 	bne	r2,zero,4021574 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4021484:	e0bff417 	ldw	r2,-48(fp)
 4021488:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 402148c:	8d44983a 	sll	r2,r17,r21
 4021490:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4021494:	e0bff417 	ldw	r2,-48(fp)
 4021498:	10800e17 	ldw	r2,56(r2)
 402149c:	10800058 	cmpnei	r2,r2,1
 40214a0:	10000f1e 	bne	r2,zero,40214e0 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
 40214a4:	8825883a 	mov	r18,r17
 40214a8:	00000b06 	br	40214d8 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
 40214ac:	b023883a 	mov	r17,r22
 40214b0:	00000406 	br	40214c4 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
 40214b4:	8c05883a 	add	r2,r17,r16
 40214b8:	b807883a 	mov	r3,r23
 40214bc:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40214c0:	8c400044 	addi	r17,r17,1
 40214c4:	a47ffb2e 	bgeu	r20,r17,40214b4 <__flash_rwdata_start+0xffffdfb0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 40214c8:	00800044 	movi	r2,1
 40214cc:	1544983a 	sll	r2,r2,r21
 40214d0:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 40214d4:	94800044 	addi	r18,r18,1
 40214d8:	9cbff42e 	bgeu	r19,r18,40214ac <__flash_rwdata_start+0xffffdfa8>
 40214dc:	00006306 	br	402166c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40214e0:	e0bff417 	ldw	r2,-48(fp)
 40214e4:	10800e17 	ldw	r2,56(r2)
 40214e8:	10800098 	cmpnei	r2,r2,2
 40214ec:	1000101e 	bne	r2,zero,4021530 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
 40214f0:	8825883a 	mov	r18,r17
 40214f4:	00000c06 	br	4021528 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
 40214f8:	b023883a 	mov	r17,r22
 40214fc:	00000506 	br	4021514 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4021500:	8c45883a 	add	r2,r17,r17
 4021504:	1405883a 	add	r2,r2,r16
 4021508:	b807883a 	mov	r3,r23
 402150c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4021510:	8c400044 	addi	r17,r17,1
 4021514:	a47ffa2e 	bgeu	r20,r17,4021500 <__flash_rwdata_start+0xffffdffc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 4021518:	00800044 	movi	r2,1
 402151c:	1544983a 	sll	r2,r2,r21
 4021520:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4021524:	94800044 	addi	r18,r18,1
 4021528:	9cbff32e 	bgeu	r19,r18,40214f8 <__flash_rwdata_start+0xffffdff4>
 402152c:	00004f06 	br	402166c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4021530:	8825883a 	mov	r18,r17
 4021534:	00000d06 	br	402156c <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
 4021538:	b023883a 	mov	r17,r22
 402153c:	00000606 	br	4021558 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4021540:	8c45883a 	add	r2,r17,r17
 4021544:	1085883a 	add	r2,r2,r2
 4021548:	1405883a 	add	r2,r2,r16
 402154c:	b807883a 	mov	r3,r23
 4021550:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4021554:	8c400044 	addi	r17,r17,1
 4021558:	a47ff92e 	bgeu	r20,r17,4021540 <__flash_rwdata_start+0xffffe03c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 402155c:	00800044 	movi	r2,1
 4021560:	1544983a 	sll	r2,r2,r21
 4021564:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4021568:	94800044 	addi	r18,r18,1
 402156c:	9cbff22e 	bgeu	r19,r18,4021538 <__flash_rwdata_start+0xffffe034>
 4021570:	00003e06 	br	402166c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4021574:	e0bff417 	ldw	r2,-48(fp)
 4021578:	10800e17 	ldw	r2,56(r2)
 402157c:	10800058 	cmpnei	r2,r2,1
 4021580:	10000f1e 	bne	r2,zero,40215c0 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
 4021584:	8c85383a 	mul	r2,r17,r18
 4021588:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 402158c:	882b883a 	mov	r21,r17
 4021590:	00000906 	br	40215b8 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
 4021594:	b023883a 	mov	r17,r22
 4021598:	00000406 	br	40215ac <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
 402159c:	8c05883a 	add	r2,r17,r16
 40215a0:	b807883a 	mov	r3,r23
 40215a4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40215a8:	8c400044 	addi	r17,r17,1
 40215ac:	a47ffb2e 	bgeu	r20,r17,402159c <__flash_rwdata_start+0xffffe098>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 40215b0:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 40215b4:	ad400044 	addi	r21,r21,1
 40215b8:	9d7ff62e 	bgeu	r19,r21,4021594 <__flash_rwdata_start+0xffffe090>
 40215bc:	00002b06 	br	402166c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40215c0:	e0bff417 	ldw	r2,-48(fp)
 40215c4:	10800e17 	ldw	r2,56(r2)
 40215c8:	10800098 	cmpnei	r2,r2,2
 40215cc:	1000121e 	bne	r2,zero,4021618 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
 40215d0:	9485883a 	add	r2,r18,r18
 40215d4:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 40215d8:	8c85383a 	mul	r2,r17,r18
 40215dc:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40215e0:	882b883a 	mov	r21,r17
 40215e4:	00000a06 	br	4021610 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
 40215e8:	b023883a 	mov	r17,r22
 40215ec:	00000506 	br	4021604 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 40215f0:	8c45883a 	add	r2,r17,r17
 40215f4:	1405883a 	add	r2,r2,r16
 40215f8:	b807883a 	mov	r3,r23
 40215fc:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4021600:	8c400044 	addi	r17,r17,1
 4021604:	a47ffa2e 	bgeu	r20,r17,40215f0 <__flash_rwdata_start+0xffffe0ec>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 4021608:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 402160c:	ad400044 	addi	r21,r21,1
 4021610:	9d7ff52e 	bgeu	r19,r21,40215e8 <__flash_rwdata_start+0xffffe0e4>
 4021614:	00001506 	br	402166c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4021618:	9485883a 	add	r2,r18,r18
 402161c:	1085883a 	add	r2,r2,r2
 4021620:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4021624:	8c85383a 	mul	r2,r17,r18
 4021628:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 402162c:	882b883a 	mov	r21,r17
 4021630:	00000b06 	br	4021660 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 4021634:	b023883a 	mov	r17,r22
 4021638:	00000606 	br	4021654 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 402163c:	8c45883a 	add	r2,r17,r17
 4021640:	1085883a 	add	r2,r2,r2
 4021644:	1405883a 	add	r2,r2,r16
 4021648:	b807883a 	mov	r3,r23
 402164c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4021650:	8c400044 	addi	r17,r17,1
 4021654:	a47ff92e 	bgeu	r20,r17,402163c <__flash_rwdata_start+0xffffe138>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 4021658:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 402165c:	ad400044 	addi	r21,r21,1
 4021660:	9d7ff42e 	bgeu	r19,r21,4021634 <__flash_rwdata_start+0xffffe130>
 4021664:	00000106 	br	402166c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4021668:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 402166c:	e6fff804 	addi	sp,fp,-32
 4021670:	df000817 	ldw	fp,32(sp)
 4021674:	ddc00717 	ldw	r23,28(sp)
 4021678:	dd800617 	ldw	r22,24(sp)
 402167c:	dd400517 	ldw	r21,20(sp)
 4021680:	dd000417 	ldw	r20,16(sp)
 4021684:	dcc00317 	ldw	r19,12(sp)
 4021688:	dc800217 	ldw	r18,8(sp)
 402168c:	dc400117 	ldw	r17,4(sp)
 4021690:	dc000017 	ldw	r16,0(sp)
 4021694:	dec00904 	addi	sp,sp,36
 4021698:	f800283a 	ret

0402169c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 402169c:	defff404 	addi	sp,sp,-48
 40216a0:	df000b15 	stw	fp,44(sp)
 40216a4:	dd800a15 	stw	r22,40(sp)
 40216a8:	dd400915 	stw	r21,36(sp)
 40216ac:	dd000815 	stw	r20,32(sp)
 40216b0:	dcc00715 	stw	r19,28(sp)
 40216b4:	dc800615 	stw	r18,24(sp)
 40216b8:	dc400515 	stw	r17,20(sp)
 40216bc:	dc000415 	stw	r16,16(sp)
 40216c0:	df000b04 	addi	fp,sp,44
 40216c4:	e13ff515 	stw	r4,-44(fp)
 40216c8:	e17ff615 	stw	r5,-40(fp)
 40216cc:	e1bff715 	stw	r6,-36(fp)
 40216d0:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 40216d4:	e0bff517 	ldw	r2,-44(fp)
 40216d8:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 40216dc:	e0bff517 	ldw	r2,-44(fp)
 40216e0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 40216e4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 40216e8:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 40216ec:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 40216f0:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 40216f4:	9c40032e 	bgeu	r19,r17,4021704 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 40216f8:	882d883a 	mov	r22,r17
		l_x = r_x;
 40216fc:	9823883a 	mov	r17,r19
		r_x = temp;
 4021700:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 4021704:	8c805d2e 	bgeu	r17,r18,402187c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
 4021708:	a4005c2e 	bgeu	r20,r16,402187c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 402170c:	9c800136 	bltu	r19,r18,4021714 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
 4021710:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4021714:	e0800217 	ldw	r2,8(fp)
 4021718:	10800058 	cmpnei	r2,r2,1
 402171c:	1000031e 	bne	r2,zero,402172c <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 4021720:	e0bff517 	ldw	r2,-44(fp)
 4021724:	14000c17 	ldw	r16,48(r2)
 4021728:	00000206 	br	4021734 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 402172c:	e0bff517 	ldw	r2,-44(fp)
 4021730:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4021734:	e0bff517 	ldw	r2,-44(fp)
 4021738:	10800d17 	ldw	r2,52(r2)
 402173c:	1000231e 	bne	r2,zero,40217cc <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4021740:	e0bff517 	ldw	r2,-44(fp)
 4021744:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 4021748:	a484983a 	sll	r2,r20,r18
 402174c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4021750:	e0bff517 	ldw	r2,-44(fp)
 4021754:	10800e17 	ldw	r2,56(r2)
 4021758:	10800058 	cmpnei	r2,r2,1
 402175c:	1000071e 	bne	r2,zero,402177c <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
 4021760:	00000406 	br	4021774 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4021764:	8c05883a 	add	r2,r17,r16
 4021768:	a807883a 	mov	r3,r21
 402176c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4021770:	8c400044 	addi	r17,r17,1
 4021774:	9c7ffb2e 	bgeu	r19,r17,4021764 <__flash_rwdata_start+0xffffe260>
 4021778:	00004106 	br	4021880 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 402177c:	e0bff517 	ldw	r2,-44(fp)
 4021780:	10800e17 	ldw	r2,56(r2)
 4021784:	10800098 	cmpnei	r2,r2,2
 4021788:	10000e1e 	bne	r2,zero,40217c4 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
 402178c:	00000506 	br	40217a4 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4021790:	8c45883a 	add	r2,r17,r17
 4021794:	1405883a 	add	r2,r2,r16
 4021798:	a807883a 	mov	r3,r21
 402179c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 40217a0:	8c400044 	addi	r17,r17,1
 40217a4:	9c7ffa2e 	bgeu	r19,r17,4021790 <__flash_rwdata_start+0xffffe28c>
 40217a8:	00003506 	br	4021880 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 40217ac:	8c45883a 	add	r2,r17,r17
 40217b0:	1085883a 	add	r2,r2,r2
 40217b4:	1405883a 	add	r2,r2,r16
 40217b8:	a807883a 	mov	r3,r21
 40217bc:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 40217c0:	8c400044 	addi	r17,r17,1
 40217c4:	9c7ff92e 	bgeu	r19,r17,40217ac <__flash_rwdata_start+0xffffe2a8>
 40217c8:	00002d06 	br	4021880 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40217cc:	e0bff517 	ldw	r2,-44(fp)
 40217d0:	10800e17 	ldw	r2,56(r2)
 40217d4:	10800058 	cmpnei	r2,r2,1
 40217d8:	1000091e 	bne	r2,zero,4021800 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
 40217dc:	a485383a 	mul	r2,r20,r18
 40217e0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 40217e4:	00000406 	br	40217f8 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 40217e8:	8c05883a 	add	r2,r17,r16
 40217ec:	a807883a 	mov	r3,r21
 40217f0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 40217f4:	8c400044 	addi	r17,r17,1
 40217f8:	9c7ffb2e 	bgeu	r19,r17,40217e8 <__flash_rwdata_start+0xffffe2e4>
 40217fc:	00002006 	br	4021880 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4021800:	e0bff517 	ldw	r2,-44(fp)
 4021804:	10800e17 	ldw	r2,56(r2)
 4021808:	10800098 	cmpnei	r2,r2,2
 402180c:	10000c1e 	bne	r2,zero,4021840 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
 4021810:	9485883a 	add	r2,r18,r18
 4021814:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 4021818:	a485383a 	mul	r2,r20,r18
 402181c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4021820:	00000506 	br	4021838 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4021824:	8c45883a 	add	r2,r17,r17
 4021828:	1405883a 	add	r2,r2,r16
 402182c:	a807883a 	mov	r3,r21
 4021830:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4021834:	8c400044 	addi	r17,r17,1
 4021838:	9c7ffa2e 	bgeu	r19,r17,4021824 <__flash_rwdata_start+0xffffe320>
 402183c:	00001006 	br	4021880 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4021840:	9485883a 	add	r2,r18,r18
 4021844:	1085883a 	add	r2,r2,r2
 4021848:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 402184c:	a485383a 	mul	r2,r20,r18
 4021850:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4021854:	00000606 	br	4021870 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4021858:	8c45883a 	add	r2,r17,r17
 402185c:	1085883a 	add	r2,r2,r2
 4021860:	1405883a 	add	r2,r2,r16
 4021864:	a807883a 	mov	r3,r21
 4021868:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 402186c:	8c400044 	addi	r17,r17,1
 4021870:	9c7ff92e 	bgeu	r19,r17,4021858 <__flash_rwdata_start+0xffffe354>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 4021874:	84a1883a 	add	r16,r16,r18
 4021878:	00000106 	br	4021880 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 402187c:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 4021880:	e6fff904 	addi	sp,fp,-28
 4021884:	df000717 	ldw	fp,28(sp)
 4021888:	dd800617 	ldw	r22,24(sp)
 402188c:	dd400517 	ldw	r21,20(sp)
 4021890:	dd000417 	ldw	r20,16(sp)
 4021894:	dcc00317 	ldw	r19,12(sp)
 4021898:	dc800217 	ldw	r18,8(sp)
 402189c:	dc400117 	ldw	r17,4(sp)
 40218a0:	dc000017 	ldw	r16,0(sp)
 40218a4:	dec00804 	addi	sp,sp,32
 40218a8:	f800283a 	ret

040218ac <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 40218ac:	defff404 	addi	sp,sp,-48
 40218b0:	df000b15 	stw	fp,44(sp)
 40218b4:	dd800a15 	stw	r22,40(sp)
 40218b8:	dd400915 	stw	r21,36(sp)
 40218bc:	dd000815 	stw	r20,32(sp)
 40218c0:	dcc00715 	stw	r19,28(sp)
 40218c4:	dc800615 	stw	r18,24(sp)
 40218c8:	dc400515 	stw	r17,20(sp)
 40218cc:	dc000415 	stw	r16,16(sp)
 40218d0:	df000b04 	addi	fp,sp,44
 40218d4:	e13ff515 	stw	r4,-44(fp)
 40218d8:	e17ff615 	stw	r5,-40(fp)
 40218dc:	e1bff715 	stw	r6,-36(fp)
 40218e0:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 40218e4:	e0bff517 	ldw	r2,-44(fp)
 40218e8:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 40218ec:	e0bff517 	ldw	r2,-44(fp)
 40218f0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 40218f4:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 40218f8:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 40218fc:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 4021900:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 4021904:	9d00032e 	bgeu	r19,r20,4021914 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 4021908:	a02b883a 	mov	r21,r20
		t_y = b_y;
 402190c:	9829883a 	mov	r20,r19
		b_y = temp;
 4021910:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4021914:	94406c2e 	bgeu	r18,r17,4021ac8 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
 4021918:	a4006b2e 	bgeu	r20,r16,4021ac8 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 402191c:	9c000136 	bltu	r19,r16,4021924 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
 4021920:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4021924:	e0800217 	ldw	r2,8(fp)
 4021928:	10800058 	cmpnei	r2,r2,1
 402192c:	1000031e 	bne	r2,zero,402193c <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 4021930:	e0bff517 	ldw	r2,-44(fp)
 4021934:	14000c17 	ldw	r16,48(r2)
 4021938:	00000206 	br	4021944 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 402193c:	e0bff517 	ldw	r2,-44(fp)
 4021940:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4021944:	e0bff517 	ldw	r2,-44(fp)
 4021948:	10800d17 	ldw	r2,52(r2)
 402194c:	1000301e 	bne	r2,zero,4021a10 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4021950:	e0bff517 	ldw	r2,-44(fp)
 4021954:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 4021958:	a544983a 	sll	r2,r20,r21
 402195c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4021960:	e0bff517 	ldw	r2,-44(fp)
 4021964:	10800e17 	ldw	r2,56(r2)
 4021968:	10800058 	cmpnei	r2,r2,1
 402196c:	10000b1e 	bne	r2,zero,402199c <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
 4021970:	a023883a 	mov	r17,r20
 4021974:	00000706 	br	4021994 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4021978:	9405883a 	add	r2,r18,r16
 402197c:	b007883a 	mov	r3,r22
 4021980:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4021984:	00800044 	movi	r2,1
 4021988:	1544983a 	sll	r2,r2,r21
 402198c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4021990:	8c400044 	addi	r17,r17,1
 4021994:	9c7ff82e 	bgeu	r19,r17,4021978 <__flash_rwdata_start+0xffffe474>
 4021998:	00004c06 	br	4021acc <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 402199c:	e0bff517 	ldw	r2,-44(fp)
 40219a0:	10800e17 	ldw	r2,56(r2)
 40219a4:	10800098 	cmpnei	r2,r2,2
 40219a8:	10000c1e 	bne	r2,zero,40219dc <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
 40219ac:	a023883a 	mov	r17,r20
 40219b0:	00000806 	br	40219d4 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 40219b4:	9485883a 	add	r2,r18,r18
 40219b8:	1405883a 	add	r2,r2,r16
 40219bc:	b007883a 	mov	r3,r22
 40219c0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 40219c4:	00800044 	movi	r2,1
 40219c8:	1544983a 	sll	r2,r2,r21
 40219cc:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 40219d0:	8c400044 	addi	r17,r17,1
 40219d4:	9c7ff72e 	bgeu	r19,r17,40219b4 <__flash_rwdata_start+0xffffe4b0>
 40219d8:	00003c06 	br	4021acc <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 40219dc:	a023883a 	mov	r17,r20
 40219e0:	00000906 	br	4021a08 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 40219e4:	9485883a 	add	r2,r18,r18
 40219e8:	1085883a 	add	r2,r2,r2
 40219ec:	1405883a 	add	r2,r2,r16
 40219f0:	b007883a 	mov	r3,r22
 40219f4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 40219f8:	00800044 	movi	r2,1
 40219fc:	1544983a 	sll	r2,r2,r21
 4021a00:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4021a04:	8c400044 	addi	r17,r17,1
 4021a08:	9c7ff62e 	bgeu	r19,r17,40219e4 <__flash_rwdata_start+0xffffe4e0>
 4021a0c:	00002f06 	br	4021acc <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4021a10:	e0bff517 	ldw	r2,-44(fp)
 4021a14:	10800e17 	ldw	r2,56(r2)
 4021a18:	10800058 	cmpnei	r2,r2,1
 4021a1c:	10000a1e 	bne	r2,zero,4021a48 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
 4021a20:	a445383a 	mul	r2,r20,r17
 4021a24:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4021a28:	00000506 	br	4021a40 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4021a2c:	9405883a 	add	r2,r18,r16
 4021a30:	b007883a 	mov	r3,r22
 4021a34:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 4021a38:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4021a3c:	a5000044 	addi	r20,r20,1
 4021a40:	9d3ffa2e 	bgeu	r19,r20,4021a2c <__flash_rwdata_start+0xffffe528>
 4021a44:	00002106 	br	4021acc <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4021a48:	e0bff517 	ldw	r2,-44(fp)
 4021a4c:	10800e17 	ldw	r2,56(r2)
 4021a50:	10800098 	cmpnei	r2,r2,2
 4021a54:	10000d1e 	bne	r2,zero,4021a8c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
 4021a58:	8c45883a 	add	r2,r17,r17
 4021a5c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 4021a60:	a445383a 	mul	r2,r20,r17
 4021a64:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4021a68:	00000606 	br	4021a84 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4021a6c:	9485883a 	add	r2,r18,r18
 4021a70:	1405883a 	add	r2,r2,r16
 4021a74:	b007883a 	mov	r3,r22
 4021a78:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 4021a7c:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4021a80:	a5000044 	addi	r20,r20,1
 4021a84:	9d3ff92e 	bgeu	r19,r20,4021a6c <__flash_rwdata_start+0xffffe568>
 4021a88:	00001006 	br	4021acc <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4021a8c:	8c45883a 	add	r2,r17,r17
 4021a90:	1085883a 	add	r2,r2,r2
 4021a94:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 4021a98:	a445383a 	mul	r2,r20,r17
 4021a9c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4021aa0:	00000706 	br	4021ac0 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4021aa4:	9485883a 	add	r2,r18,r18
 4021aa8:	1085883a 	add	r2,r2,r2
 4021aac:	1405883a 	add	r2,r2,r16
 4021ab0:	b007883a 	mov	r3,r22
 4021ab4:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 4021ab8:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4021abc:	a5000044 	addi	r20,r20,1
 4021ac0:	9d3ff82e 	bgeu	r19,r20,4021aa4 <__flash_rwdata_start+0xffffe5a0>
 4021ac4:	00000106 	br	4021acc <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4021ac8:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 4021acc:	e6fff904 	addi	sp,fp,-28
 4021ad0:	df000717 	ldw	fp,28(sp)
 4021ad4:	dd800617 	ldw	r22,24(sp)
 4021ad8:	dd400517 	ldw	r21,20(sp)
 4021adc:	dd000417 	ldw	r20,16(sp)
 4021ae0:	dcc00317 	ldw	r19,12(sp)
 4021ae4:	dc800217 	ldw	r18,8(sp)
 4021ae8:	dc400117 	ldw	r17,4(sp)
 4021aec:	dc000017 	ldw	r16,0(sp)
 4021af0:	dec00804 	addi	sp,sp,32
 4021af4:	f800283a 	ret

04021af8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4021af8:	defff804 	addi	sp,sp,-32
 4021afc:	dfc00715 	stw	ra,28(sp)
 4021b00:	df000615 	stw	fp,24(sp)
 4021b04:	df000604 	addi	fp,sp,24
 4021b08:	e13ffc15 	stw	r4,-16(fp)
 4021b0c:	e17ffd15 	stw	r5,-12(fp)
 4021b10:	e1bffe15 	stw	r6,-8(fp)
 4021b14:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4021b18:	e0800417 	ldw	r2,16(fp)
 4021b1c:	d8800115 	stw	r2,4(sp)
 4021b20:	e0800317 	ldw	r2,12(fp)
 4021b24:	d8800015 	stw	r2,0(sp)
 4021b28:	e1fffe17 	ldw	r7,-8(fp)
 4021b2c:	e1bfff17 	ldw	r6,-4(fp)
 4021b30:	e17ffd17 	ldw	r5,-12(fp)
 4021b34:	e13ffc17 	ldw	r4,-16(fp)
 4021b38:	402169c0 	call	402169c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 4021b3c:	e0800417 	ldw	r2,16(fp)
 4021b40:	d8800115 	stw	r2,4(sp)
 4021b44:	e0800317 	ldw	r2,12(fp)
 4021b48:	d8800015 	stw	r2,0(sp)
 4021b4c:	e1c00217 	ldw	r7,8(fp)
 4021b50:	e1bfff17 	ldw	r6,-4(fp)
 4021b54:	e17ffd17 	ldw	r5,-12(fp)
 4021b58:	e13ffc17 	ldw	r4,-16(fp)
 4021b5c:	402169c0 	call	402169c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 4021b60:	e0800417 	ldw	r2,16(fp)
 4021b64:	d8800115 	stw	r2,4(sp)
 4021b68:	e0800317 	ldw	r2,12(fp)
 4021b6c:	d8800015 	stw	r2,0(sp)
 4021b70:	e1c00217 	ldw	r7,8(fp)
 4021b74:	e1bffe17 	ldw	r6,-8(fp)
 4021b78:	e17ffd17 	ldw	r5,-12(fp)
 4021b7c:	e13ffc17 	ldw	r4,-16(fp)
 4021b80:	40218ac0 	call	40218ac <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 4021b84:	e0800417 	ldw	r2,16(fp)
 4021b88:	d8800115 	stw	r2,4(sp)
 4021b8c:	e0800317 	ldw	r2,12(fp)
 4021b90:	d8800015 	stw	r2,0(sp)
 4021b94:	e1c00217 	ldw	r7,8(fp)
 4021b98:	e1bffe17 	ldw	r6,-8(fp)
 4021b9c:	e17fff17 	ldw	r5,-4(fp)
 4021ba0:	e13ffc17 	ldw	r4,-16(fp)
 4021ba4:	40218ac0 	call	40218ac <alt_up_pixel_buffer_dma_draw_vline>
}
 4021ba8:	0001883a 	nop
 4021bac:	e037883a 	mov	sp,fp
 4021bb0:	dfc00117 	ldw	ra,4(sp)
 4021bb4:	df000017 	ldw	fp,0(sp)
 4021bb8:	dec00204 	addi	sp,sp,8
 4021bbc:	f800283a 	ret

04021bc0 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 4021bc0:	deffff04 	addi	sp,sp,-4
 4021bc4:	df000015 	stw	fp,0(sp)
 4021bc8:	d839883a 	mov	fp,sp
 4021bcc:	2005883a 	mov	r2,r4
 4021bd0:	3007883a 	mov	r3,r6
 4021bd4:	3809883a 	mov	r4,r7
 4021bd8:	e1800117 	ldw	r6,4(fp)
 4021bdc:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 4021be0:	3800051e 	bne	r7,zero,4021bf8 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 4021be4:	2909383a 	mul	r4,r5,r4
 4021be8:	20c7883a 	add	r3,r4,r3
 4021bec:	1885883a 	add	r2,r3,r2
 4021bf0:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 4021bf4:	00000e06 	br	4021c30 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 4021bf8:	39c00058 	cmpnei	r7,r7,1
 4021bfc:	3800061e 	bne	r7,zero,4021c18 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4021c00:	2909383a 	mul	r4,r5,r4
 4021c04:	20c7883a 	add	r3,r4,r3
 4021c08:	18c7883a 	add	r3,r3,r3
 4021c0c:	1885883a 	add	r2,r3,r2
 4021c10:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 4021c14:	00000606 	br	4021c30 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 4021c18:	2909383a 	mul	r4,r5,r4
 4021c1c:	20c7883a 	add	r3,r4,r3
 4021c20:	18c7883a 	add	r3,r3,r3
 4021c24:	18c7883a 	add	r3,r3,r3
 4021c28:	1885883a 	add	r2,r3,r2
 4021c2c:	11800035 	stwio	r6,0(r2)
}
 4021c30:	0001883a 	nop
 4021c34:	e037883a 	mov	sp,fp
 4021c38:	df000017 	ldw	fp,0(sp)
 4021c3c:	dec00104 	addi	sp,sp,4
 4021c40:	f800283a 	ret

04021c44 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 4021c44:	deffeb04 	addi	sp,sp,-84
 4021c48:	dfc01415 	stw	ra,80(sp)
 4021c4c:	df001315 	stw	fp,76(sp)
 4021c50:	ddc01215 	stw	r23,72(sp)
 4021c54:	dd801115 	stw	r22,68(sp)
 4021c58:	dd401015 	stw	r21,64(sp)
 4021c5c:	dd000f15 	stw	r20,60(sp)
 4021c60:	dcc00e15 	stw	r19,56(sp)
 4021c64:	dc800d15 	stw	r18,52(sp)
 4021c68:	dc400c15 	stw	r17,48(sp)
 4021c6c:	dc000b15 	stw	r16,44(sp)
 4021c70:	df001304 	addi	fp,sp,76
 4021c74:	e13fef15 	stw	r4,-68(fp)
 4021c78:	e17ff015 	stw	r5,-64(fp)
 4021c7c:	e1bff115 	stw	r6,-60(fp)
 4021c80:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 4021c84:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 4021c88:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 4021c8c:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 4021c90:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 4021c94:	a4c5c83a 	sub	r2,r20,r19
 4021c98:	1000010e 	bge	r2,zero,4021ca0 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 4021c9c:	0085c83a 	sub	r2,zero,r2
 4021ca0:	1007883a 	mov	r3,r2
 4021ca4:	9445c83a 	sub	r2,r18,r17
 4021ca8:	1000010e 	bge	r2,zero,4021cb0 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 4021cac:	0085c83a 	sub	r2,zero,r2
 4021cb0:	10c4803a 	cmplt	r2,r2,r3
 4021cb4:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4021cb8:	e0bfef17 	ldw	r2,-68(fp)
 4021cbc:	10800e17 	ldw	r2,56(r2)
 4021cc0:	10800060 	cmpeqi	r2,r2,1
 4021cc4:	1000081e 	bne	r2,zero,4021ce8 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 4021cc8:	e0bfef17 	ldw	r2,-68(fp)
 4021ccc:	10800e17 	ldw	r2,56(r2)
 4021cd0:	10800098 	cmpnei	r2,r2,2
 4021cd4:	1000021e 	bne	r2,zero,4021ce0 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 4021cd8:	00800044 	movi	r2,1
 4021cdc:	00000306 	br	4021cec <alt_up_pixel_buffer_dma_draw_line+0xa8>
 4021ce0:	00800084 	movi	r2,2
 4021ce4:	00000106 	br	4021cec <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4021ce8:	0005883a 	mov	r2,zero
 4021cec:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 4021cf0:	e0800317 	ldw	r2,12(fp)
 4021cf4:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 4021cf8:	e0bfef17 	ldw	r2,-68(fp)
 4021cfc:	10800d17 	ldw	r2,52(r2)
 4021d00:	1000071e 	bne	r2,zero,4021d20 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 4021d04:	e0bfef17 	ldw	r2,-68(fp)
 4021d08:	10801317 	ldw	r2,76(r2)
 4021d0c:	e0fff417 	ldw	r3,-48(fp)
 4021d10:	10c5c83a 	sub	r2,r2,r3
 4021d14:	00c00044 	movi	r3,1
 4021d18:	1884983a 	sll	r2,r3,r2
 4021d1c:	00000206 	br	4021d28 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 4021d20:	e0bfef17 	ldw	r2,-68(fp)
 4021d24:	10800f17 	ldw	r2,60(r2)
 4021d28:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 4021d2c:	e0800417 	ldw	r2,16(fp)
 4021d30:	10800058 	cmpnei	r2,r2,1
 4021d34:	1000031e 	bne	r2,zero,4021d44 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 4021d38:	e0bfef17 	ldw	r2,-68(fp)
 4021d3c:	15c00c17 	ldw	r23,48(r2)
 4021d40:	00000206 	br	4021d4c <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 4021d44:	e0bfef17 	ldw	r2,-68(fp)
 4021d48:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 4021d4c:	e0bff307 	ldb	r2,-52(fp)
 4021d50:	0080060e 	bge	zero,r2,4021d6c <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 4021d54:	8821883a 	mov	r16,r17
		x_0 = y_0;
 4021d58:	9823883a 	mov	r17,r19
		y_0 = error;
 4021d5c:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 4021d60:	9021883a 	mov	r16,r18
		x_1 = y_1;
 4021d64:	a025883a 	mov	r18,r20
		y_1 = error;
 4021d68:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 4021d6c:	9440060e 	bge	r18,r17,4021d88 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 4021d70:	8821883a 	mov	r16,r17
		x_0 = x_1;
 4021d74:	9023883a 	mov	r17,r18
		x_1 = error;
 4021d78:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 4021d7c:	9821883a 	mov	r16,r19
		y_0 = y_1;
 4021d80:	a027883a 	mov	r19,r20
		y_1 = error;
 4021d84:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 4021d88:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 4021d8c:	a4c5c83a 	sub	r2,r20,r19
 4021d90:	1000010e 	bge	r2,zero,4021d98 <alt_up_pixel_buffer_dma_draw_line+0x154>
 4021d94:	0085c83a 	sub	r2,zero,r2
 4021d98:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 4021d9c:	a804d7fa 	srli	r2,r21,31
 4021da0:	1545883a 	add	r2,r2,r21
 4021da4:	1005d07a 	srai	r2,r2,1
 4021da8:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 4021dac:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 4021db0:	9d00020e 	bge	r19,r20,4021dbc <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 4021db4:	04c00044 	movi	r19,1
 4021db8:	00000106 	br	4021dc0 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 4021dbc:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 4021dc0:	e0bff307 	ldb	r2,-52(fp)
 4021dc4:	10800058 	cmpnei	r2,r2,1
 4021dc8:	1000211e 	bne	r2,zero,4021e50 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 4021dcc:	00000f06 	br	4021e0c <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 4021dd0:	e0bff417 	ldw	r2,-48(fp)
 4021dd4:	d8800115 	stw	r2,4(sp)
 4021dd8:	e0bff517 	ldw	r2,-44(fp)
 4021ddc:	d8800015 	stw	r2,0(sp)
 4021de0:	880f883a 	mov	r7,r17
 4021de4:	b00d883a 	mov	r6,r22
 4021de8:	e17ff617 	ldw	r5,-40(fp)
 4021dec:	b809883a 	mov	r4,r23
 4021df0:	4021bc00 	call	4021bc0 <helper_plot_pixel>
			error = error + deltay;
 4021df4:	e0bff717 	ldw	r2,-36(fp)
 4021df8:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4021dfc:	0400020e 	bge	zero,r16,4021e08 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 4021e00:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4021e04:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 4021e08:	8c400044 	addi	r17,r17,1
 4021e0c:	947ff00e 	bge	r18,r17,4021dd0 <__flash_rwdata_start+0xffffe8cc>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4021e10:	00001006 	br	4021e54 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 4021e14:	e0bff417 	ldw	r2,-48(fp)
 4021e18:	d8800115 	stw	r2,4(sp)
 4021e1c:	e0bff517 	ldw	r2,-44(fp)
 4021e20:	d8800015 	stw	r2,0(sp)
 4021e24:	b00f883a 	mov	r7,r22
 4021e28:	880d883a 	mov	r6,r17
 4021e2c:	e17ff617 	ldw	r5,-40(fp)
 4021e30:	b809883a 	mov	r4,r23
 4021e34:	4021bc00 	call	4021bc0 <helper_plot_pixel>
			error = error + deltay;
 4021e38:	e0bff717 	ldw	r2,-36(fp)
 4021e3c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4021e40:	0400020e 	bge	zero,r16,4021e4c <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 4021e44:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4021e48:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 4021e4c:	8c400044 	addi	r17,r17,1
 4021e50:	947ff00e 	bge	r18,r17,4021e14 <__flash_rwdata_start+0xffffe910>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4021e54:	0001883a 	nop
 4021e58:	e6fff804 	addi	sp,fp,-32
 4021e5c:	dfc00917 	ldw	ra,36(sp)
 4021e60:	df000817 	ldw	fp,32(sp)
 4021e64:	ddc00717 	ldw	r23,28(sp)
 4021e68:	dd800617 	ldw	r22,24(sp)
 4021e6c:	dd400517 	ldw	r21,20(sp)
 4021e70:	dd000417 	ldw	r20,16(sp)
 4021e74:	dcc00317 	ldw	r19,12(sp)
 4021e78:	dc800217 	ldw	r18,8(sp)
 4021e7c:	dc400117 	ldw	r17,4(sp)
 4021e80:	dc000017 	ldw	r16,0(sp)
 4021e84:	dec00a04 	addi	sp,sp,40
 4021e88:	f800283a 	ret

04021e8c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4021e8c:	defffa04 	addi	sp,sp,-24
 4021e90:	dfc00515 	stw	ra,20(sp)
 4021e94:	df000415 	stw	fp,16(sp)
 4021e98:	df000404 	addi	fp,sp,16
 4021e9c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4021ea0:	008000c4 	movi	r2,3
 4021ea4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4021ea8:	e0fffd17 	ldw	r3,-12(fp)
 4021eac:	008003f4 	movhi	r2,15
 4021eb0:	10909004 	addi	r2,r2,16960
 4021eb4:	1885383a 	mul	r2,r3,r2
 4021eb8:	100b883a 	mov	r5,r2
 4021ebc:	01017db4 	movhi	r4,1526
 4021ec0:	21384004 	addi	r4,r4,-7936
 4021ec4:	40233440 	call	4023344 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4021ec8:	100b883a 	mov	r5,r2
 4021ecc:	01200034 	movhi	r4,32768
 4021ed0:	213fffc4 	addi	r4,r4,-1
 4021ed4:	40233440 	call	4023344 <__udivsi3>
 4021ed8:	100b883a 	mov	r5,r2
 4021edc:	e13fff17 	ldw	r4,-4(fp)
 4021ee0:	40233440 	call	4023344 <__udivsi3>
 4021ee4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4021ee8:	e0bffe17 	ldw	r2,-8(fp)
 4021eec:	10002a26 	beq	r2,zero,4021f98 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4021ef0:	e03ffc15 	stw	zero,-16(fp)
 4021ef4:	00001706 	br	4021f54 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4021ef8:	00a00034 	movhi	r2,32768
 4021efc:	10bfffc4 	addi	r2,r2,-1
 4021f00:	10bfffc4 	addi	r2,r2,-1
 4021f04:	103ffe1e 	bne	r2,zero,4021f00 <__flash_rwdata_start+0xffffe9fc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4021f08:	e0fffd17 	ldw	r3,-12(fp)
 4021f0c:	008003f4 	movhi	r2,15
 4021f10:	10909004 	addi	r2,r2,16960
 4021f14:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4021f18:	100b883a 	mov	r5,r2
 4021f1c:	01017db4 	movhi	r4,1526
 4021f20:	21384004 	addi	r4,r4,-7936
 4021f24:	40233440 	call	4023344 <__udivsi3>
 4021f28:	100b883a 	mov	r5,r2
 4021f2c:	01200034 	movhi	r4,32768
 4021f30:	213fffc4 	addi	r4,r4,-1
 4021f34:	40233440 	call	4023344 <__udivsi3>
 4021f38:	1007883a 	mov	r3,r2
 4021f3c:	e0bfff17 	ldw	r2,-4(fp)
 4021f40:	10c5c83a 	sub	r2,r2,r3
 4021f44:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4021f48:	e0bffc17 	ldw	r2,-16(fp)
 4021f4c:	10800044 	addi	r2,r2,1
 4021f50:	e0bffc15 	stw	r2,-16(fp)
 4021f54:	e0fffc17 	ldw	r3,-16(fp)
 4021f58:	e0bffe17 	ldw	r2,-8(fp)
 4021f5c:	18bfe616 	blt	r3,r2,4021ef8 <__flash_rwdata_start+0xffffe9f4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4021f60:	e0fffd17 	ldw	r3,-12(fp)
 4021f64:	008003f4 	movhi	r2,15
 4021f68:	10909004 	addi	r2,r2,16960
 4021f6c:	1885383a 	mul	r2,r3,r2
 4021f70:	100b883a 	mov	r5,r2
 4021f74:	01017db4 	movhi	r4,1526
 4021f78:	21384004 	addi	r4,r4,-7936
 4021f7c:	40233440 	call	4023344 <__udivsi3>
 4021f80:	1007883a 	mov	r3,r2
 4021f84:	e0bfff17 	ldw	r2,-4(fp)
 4021f88:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4021f8c:	10bfffc4 	addi	r2,r2,-1
 4021f90:	103ffe1e 	bne	r2,zero,4021f8c <__flash_rwdata_start+0xffffea88>
 4021f94:	00000d06 	br	4021fcc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4021f98:	e0fffd17 	ldw	r3,-12(fp)
 4021f9c:	008003f4 	movhi	r2,15
 4021fa0:	10909004 	addi	r2,r2,16960
 4021fa4:	1885383a 	mul	r2,r3,r2
 4021fa8:	100b883a 	mov	r5,r2
 4021fac:	01017db4 	movhi	r4,1526
 4021fb0:	21384004 	addi	r4,r4,-7936
 4021fb4:	40233440 	call	4023344 <__udivsi3>
 4021fb8:	1007883a 	mov	r3,r2
 4021fbc:	e0bfff17 	ldw	r2,-4(fp)
 4021fc0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4021fc4:	10bfffc4 	addi	r2,r2,-1
 4021fc8:	00bffe16 	blt	zero,r2,4021fc4 <__flash_rwdata_start+0xffffeac0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4021fcc:	0005883a 	mov	r2,zero
}
 4021fd0:	e037883a 	mov	sp,fp
 4021fd4:	dfc00117 	ldw	ra,4(sp)
 4021fd8:	df000017 	ldw	fp,0(sp)
 4021fdc:	dec00204 	addi	sp,sp,8
 4021fe0:	f800283a 	ret

04021fe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4021fe4:	defffe04 	addi	sp,sp,-8
 4021fe8:	dfc00115 	stw	ra,4(sp)
 4021fec:	df000015 	stw	fp,0(sp)
 4021ff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4021ff4:	d0a00717 	ldw	r2,-32740(gp)
 4021ff8:	10000326 	beq	r2,zero,4022008 <alt_get_errno+0x24>
 4021ffc:	d0a00717 	ldw	r2,-32740(gp)
 4022000:	103ee83a 	callr	r2
 4022004:	00000106 	br	402200c <alt_get_errno+0x28>
 4022008:	d0a00b04 	addi	r2,gp,-32724
}
 402200c:	e037883a 	mov	sp,fp
 4022010:	dfc00117 	ldw	ra,4(sp)
 4022014:	df000017 	ldw	fp,0(sp)
 4022018:	dec00204 	addi	sp,sp,8
 402201c:	f800283a 	ret

04022020 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4022020:	defffb04 	addi	sp,sp,-20
 4022024:	dfc00415 	stw	ra,16(sp)
 4022028:	df000315 	stw	fp,12(sp)
 402202c:	df000304 	addi	fp,sp,12
 4022030:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4022034:	e0bfff17 	ldw	r2,-4(fp)
 4022038:	10000616 	blt	r2,zero,4022054 <close+0x34>
 402203c:	e0bfff17 	ldw	r2,-4(fp)
 4022040:	10c00324 	muli	r3,r2,12
 4022044:	00800034 	movhi	r2,0
 4022048:	1080a704 	addi	r2,r2,668
 402204c:	1885883a 	add	r2,r3,r2
 4022050:	00000106 	br	4022058 <close+0x38>
 4022054:	0005883a 	mov	r2,zero
 4022058:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 402205c:	e0bffd17 	ldw	r2,-12(fp)
 4022060:	10001926 	beq	r2,zero,40220c8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4022064:	e0bffd17 	ldw	r2,-12(fp)
 4022068:	10800017 	ldw	r2,0(r2)
 402206c:	10800417 	ldw	r2,16(r2)
 4022070:	10000626 	beq	r2,zero,402208c <close+0x6c>
 4022074:	e0bffd17 	ldw	r2,-12(fp)
 4022078:	10800017 	ldw	r2,0(r2)
 402207c:	10800417 	ldw	r2,16(r2)
 4022080:	e13ffd17 	ldw	r4,-12(fp)
 4022084:	103ee83a 	callr	r2
 4022088:	00000106 	br	4022090 <close+0x70>
 402208c:	0005883a 	mov	r2,zero
 4022090:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4022094:	e13fff17 	ldw	r4,-4(fp)
 4022098:	40229fc0 	call	40229fc <alt_release_fd>
    if (rval < 0)
 402209c:	e0bffe17 	ldw	r2,-8(fp)
 40220a0:	1000070e 	bge	r2,zero,40220c0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 40220a4:	4021fe40 	call	4021fe4 <alt_get_errno>
 40220a8:	1007883a 	mov	r3,r2
 40220ac:	e0bffe17 	ldw	r2,-8(fp)
 40220b0:	0085c83a 	sub	r2,zero,r2
 40220b4:	18800015 	stw	r2,0(r3)
      return -1;
 40220b8:	00bfffc4 	movi	r2,-1
 40220bc:	00000706 	br	40220dc <close+0xbc>
    }
    return 0;
 40220c0:	0005883a 	mov	r2,zero
 40220c4:	00000506 	br	40220dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40220c8:	4021fe40 	call	4021fe4 <alt_get_errno>
 40220cc:	1007883a 	mov	r3,r2
 40220d0:	00801444 	movi	r2,81
 40220d4:	18800015 	stw	r2,0(r3)
    return -1;
 40220d8:	00bfffc4 	movi	r2,-1
  }
}
 40220dc:	e037883a 	mov	sp,fp
 40220e0:	dfc00117 	ldw	ra,4(sp)
 40220e4:	df000017 	ldw	fp,0(sp)
 40220e8:	dec00204 	addi	sp,sp,8
 40220ec:	f800283a 	ret

040220f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40220f0:	defffe04 	addi	sp,sp,-8
 40220f4:	df000115 	stw	fp,4(sp)
 40220f8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40220fc:	e03fff15 	stw	zero,-4(fp)
 4022100:	00000506 	br	4022118 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4022104:	e0bfff17 	ldw	r2,-4(fp)
 4022108:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402210c:	e0bfff17 	ldw	r2,-4(fp)
 4022110:	10800804 	addi	r2,r2,32
 4022114:	e0bfff15 	stw	r2,-4(fp)
 4022118:	e0bfff17 	ldw	r2,-4(fp)
 402211c:	10820030 	cmpltui	r2,r2,2048
 4022120:	103ff81e 	bne	r2,zero,4022104 <__flash_rwdata_start+0xffffec00>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4022124:	0001883a 	nop
 4022128:	e037883a 	mov	sp,fp
 402212c:	df000017 	ldw	fp,0(sp)
 4022130:	dec00104 	addi	sp,sp,4
 4022134:	f800283a 	ret

04022138 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4022138:	defffc04 	addi	sp,sp,-16
 402213c:	df000315 	stw	fp,12(sp)
 4022140:	df000304 	addi	fp,sp,12
 4022144:	e13ffd15 	stw	r4,-12(fp)
 4022148:	e17ffe15 	stw	r5,-8(fp)
 402214c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4022150:	e0bfff17 	ldw	r2,-4(fp)
}
 4022154:	e037883a 	mov	sp,fp
 4022158:	df000017 	ldw	fp,0(sp)
 402215c:	dec00104 	addi	sp,sp,4
 4022160:	f800283a 	ret

04022164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4022164:	defffe04 	addi	sp,sp,-8
 4022168:	dfc00115 	stw	ra,4(sp)
 402216c:	df000015 	stw	fp,0(sp)
 4022170:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4022174:	d0a00717 	ldw	r2,-32740(gp)
 4022178:	10000326 	beq	r2,zero,4022188 <alt_get_errno+0x24>
 402217c:	d0a00717 	ldw	r2,-32740(gp)
 4022180:	103ee83a 	callr	r2
 4022184:	00000106 	br	402218c <alt_get_errno+0x28>
 4022188:	d0a00b04 	addi	r2,gp,-32724
}
 402218c:	e037883a 	mov	sp,fp
 4022190:	dfc00117 	ldw	ra,4(sp)
 4022194:	df000017 	ldw	fp,0(sp)
 4022198:	dec00204 	addi	sp,sp,8
 402219c:	f800283a 	ret

040221a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40221a0:	defffa04 	addi	sp,sp,-24
 40221a4:	dfc00515 	stw	ra,20(sp)
 40221a8:	df000415 	stw	fp,16(sp)
 40221ac:	df000404 	addi	fp,sp,16
 40221b0:	e13ffe15 	stw	r4,-8(fp)
 40221b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40221b8:	e0bffe17 	ldw	r2,-8(fp)
 40221bc:	10000326 	beq	r2,zero,40221cc <alt_dev_llist_insert+0x2c>
 40221c0:	e0bffe17 	ldw	r2,-8(fp)
 40221c4:	10800217 	ldw	r2,8(r2)
 40221c8:	1000061e 	bne	r2,zero,40221e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40221cc:	40221640 	call	4022164 <alt_get_errno>
 40221d0:	1007883a 	mov	r3,r2
 40221d4:	00800584 	movi	r2,22
 40221d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40221dc:	00bffa84 	movi	r2,-22
 40221e0:	00001306 	br	4022230 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40221e4:	e0bffe17 	ldw	r2,-8(fp)
 40221e8:	e0ffff17 	ldw	r3,-4(fp)
 40221ec:	e0fffc15 	stw	r3,-16(fp)
 40221f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40221f4:	e0bffd17 	ldw	r2,-12(fp)
 40221f8:	e0fffc17 	ldw	r3,-16(fp)
 40221fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4022200:	e0bffc17 	ldw	r2,-16(fp)
 4022204:	10c00017 	ldw	r3,0(r2)
 4022208:	e0bffd17 	ldw	r2,-12(fp)
 402220c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4022210:	e0bffc17 	ldw	r2,-16(fp)
 4022214:	10800017 	ldw	r2,0(r2)
 4022218:	e0fffd17 	ldw	r3,-12(fp)
 402221c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4022220:	e0bffc17 	ldw	r2,-16(fp)
 4022224:	e0fffd17 	ldw	r3,-12(fp)
 4022228:	10c00015 	stw	r3,0(r2)

  return 0;  
 402222c:	0005883a 	mov	r2,zero
}
 4022230:	e037883a 	mov	sp,fp
 4022234:	dfc00117 	ldw	ra,4(sp)
 4022238:	df000017 	ldw	fp,0(sp)
 402223c:	dec00204 	addi	sp,sp,8
 4022240:	f800283a 	ret

04022244 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4022244:	defffd04 	addi	sp,sp,-12
 4022248:	dfc00215 	stw	ra,8(sp)
 402224c:	df000115 	stw	fp,4(sp)
 4022250:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4022254:	008100b4 	movhi	r2,1026
 4022258:	108d0c04 	addi	r2,r2,13360
 402225c:	e0bfff15 	stw	r2,-4(fp)
 4022260:	00000606 	br	402227c <_do_ctors+0x38>
        (*ctor) (); 
 4022264:	e0bfff17 	ldw	r2,-4(fp)
 4022268:	10800017 	ldw	r2,0(r2)
 402226c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4022270:	e0bfff17 	ldw	r2,-4(fp)
 4022274:	10bfff04 	addi	r2,r2,-4
 4022278:	e0bfff15 	stw	r2,-4(fp)
 402227c:	e0ffff17 	ldw	r3,-4(fp)
 4022280:	008100b4 	movhi	r2,1026
 4022284:	108d0d04 	addi	r2,r2,13364
 4022288:	18bff62e 	bgeu	r3,r2,4022264 <__flash_rwdata_start+0xffffed60>
        (*ctor) (); 
}
 402228c:	0001883a 	nop
 4022290:	e037883a 	mov	sp,fp
 4022294:	dfc00117 	ldw	ra,4(sp)
 4022298:	df000017 	ldw	fp,0(sp)
 402229c:	dec00204 	addi	sp,sp,8
 40222a0:	f800283a 	ret

040222a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40222a4:	defffd04 	addi	sp,sp,-12
 40222a8:	dfc00215 	stw	ra,8(sp)
 40222ac:	df000115 	stw	fp,4(sp)
 40222b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40222b4:	008100b4 	movhi	r2,1026
 40222b8:	108d0c04 	addi	r2,r2,13360
 40222bc:	e0bfff15 	stw	r2,-4(fp)
 40222c0:	00000606 	br	40222dc <_do_dtors+0x38>
        (*dtor) (); 
 40222c4:	e0bfff17 	ldw	r2,-4(fp)
 40222c8:	10800017 	ldw	r2,0(r2)
 40222cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40222d0:	e0bfff17 	ldw	r2,-4(fp)
 40222d4:	10bfff04 	addi	r2,r2,-4
 40222d8:	e0bfff15 	stw	r2,-4(fp)
 40222dc:	e0ffff17 	ldw	r3,-4(fp)
 40222e0:	008100b4 	movhi	r2,1026
 40222e4:	108d0d04 	addi	r2,r2,13364
 40222e8:	18bff62e 	bgeu	r3,r2,40222c4 <__flash_rwdata_start+0xffffedc0>
        (*dtor) (); 
}
 40222ec:	0001883a 	nop
 40222f0:	e037883a 	mov	sp,fp
 40222f4:	dfc00117 	ldw	ra,4(sp)
 40222f8:	df000017 	ldw	fp,0(sp)
 40222fc:	dec00204 	addi	sp,sp,8
 4022300:	f800283a 	ret

04022304 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4022304:	defffa04 	addi	sp,sp,-24
 4022308:	dfc00515 	stw	ra,20(sp)
 402230c:	df000415 	stw	fp,16(sp)
 4022310:	df000404 	addi	fp,sp,16
 4022314:	e13ffe15 	stw	r4,-8(fp)
 4022318:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 402231c:	e0bfff17 	ldw	r2,-4(fp)
 4022320:	10800017 	ldw	r2,0(r2)
 4022324:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4022328:	e13ffe17 	ldw	r4,-8(fp)
 402232c:	40205340 	call	4020534 <strlen>
 4022330:	10800044 	addi	r2,r2,1
 4022334:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4022338:	00000d06 	br	4022370 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 402233c:	e0bffc17 	ldw	r2,-16(fp)
 4022340:	10800217 	ldw	r2,8(r2)
 4022344:	e0fffd17 	ldw	r3,-12(fp)
 4022348:	180d883a 	mov	r6,r3
 402234c:	e17ffe17 	ldw	r5,-8(fp)
 4022350:	1009883a 	mov	r4,r2
 4022354:	4022f340 	call	4022f34 <memcmp>
 4022358:	1000021e 	bne	r2,zero,4022364 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 402235c:	e0bffc17 	ldw	r2,-16(fp)
 4022360:	00000706 	br	4022380 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4022364:	e0bffc17 	ldw	r2,-16(fp)
 4022368:	10800017 	ldw	r2,0(r2)
 402236c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4022370:	e0fffc17 	ldw	r3,-16(fp)
 4022374:	e0bfff17 	ldw	r2,-4(fp)
 4022378:	18bff01e 	bne	r3,r2,402233c <__flash_rwdata_start+0xffffee38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 402237c:	0005883a 	mov	r2,zero
}
 4022380:	e037883a 	mov	sp,fp
 4022384:	dfc00117 	ldw	ra,4(sp)
 4022388:	df000017 	ldw	fp,0(sp)
 402238c:	dec00204 	addi	sp,sp,8
 4022390:	f800283a 	ret

04022394 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4022394:	defffe04 	addi	sp,sp,-8
 4022398:	dfc00115 	stw	ra,4(sp)
 402239c:	df000015 	stw	fp,0(sp)
 40223a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40223a4:	01440004 	movi	r5,4096
 40223a8:	0009883a 	mov	r4,zero
 40223ac:	4022dd40 	call	4022dd4 <alt_icache_flush>
#endif
}
 40223b0:	0001883a 	nop
 40223b4:	e037883a 	mov	sp,fp
 40223b8:	dfc00117 	ldw	ra,4(sp)
 40223bc:	df000017 	ldw	fp,0(sp)
 40223c0:	dec00204 	addi	sp,sp,8
 40223c4:	f800283a 	ret

040223c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40223c8:	defff904 	addi	sp,sp,-28
 40223cc:	dfc00615 	stw	ra,24(sp)
 40223d0:	df000515 	stw	fp,20(sp)
 40223d4:	df000504 	addi	fp,sp,20
 40223d8:	e13ffc15 	stw	r4,-16(fp)
 40223dc:	e17ffd15 	stw	r5,-12(fp)
 40223e0:	e1bffe15 	stw	r6,-8(fp)
 40223e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 40223e8:	e0800217 	ldw	r2,8(fp)
 40223ec:	d8800015 	stw	r2,0(sp)
 40223f0:	e1ffff17 	ldw	r7,-4(fp)
 40223f4:	e1bffe17 	ldw	r6,-8(fp)
 40223f8:	e17ffd17 	ldw	r5,-12(fp)
 40223fc:	e13ffc17 	ldw	r4,-16(fp)
 4022400:	40225780 	call	4022578 <alt_iic_isr_register>
}  
 4022404:	e037883a 	mov	sp,fp
 4022408:	dfc00117 	ldw	ra,4(sp)
 402240c:	df000017 	ldw	fp,0(sp)
 4022410:	dec00204 	addi	sp,sp,8
 4022414:	f800283a 	ret

04022418 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4022418:	defff904 	addi	sp,sp,-28
 402241c:	df000615 	stw	fp,24(sp)
 4022420:	df000604 	addi	fp,sp,24
 4022424:	e13ffe15 	stw	r4,-8(fp)
 4022428:	e17fff15 	stw	r5,-4(fp)
 402242c:	e0bfff17 	ldw	r2,-4(fp)
 4022430:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022434:	0005303a 	rdctl	r2,status
 4022438:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402243c:	e0fffb17 	ldw	r3,-20(fp)
 4022440:	00bfff84 	movi	r2,-2
 4022444:	1884703a 	and	r2,r3,r2
 4022448:	1001703a 	wrctl	status,r2
  
  return context;
 402244c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4022450:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4022454:	00c00044 	movi	r3,1
 4022458:	e0bffa17 	ldw	r2,-24(fp)
 402245c:	1884983a 	sll	r2,r3,r2
 4022460:	1007883a 	mov	r3,r2
 4022464:	d0a00f17 	ldw	r2,-32708(gp)
 4022468:	1884b03a 	or	r2,r3,r2
 402246c:	d0a00f15 	stw	r2,-32708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4022470:	d0a00f17 	ldw	r2,-32708(gp)
 4022474:	100170fa 	wrctl	ienable,r2
 4022478:	e0bffc17 	ldw	r2,-16(fp)
 402247c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022480:	e0bffd17 	ldw	r2,-12(fp)
 4022484:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4022488:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 402248c:	0001883a 	nop
}
 4022490:	e037883a 	mov	sp,fp
 4022494:	df000017 	ldw	fp,0(sp)
 4022498:	dec00104 	addi	sp,sp,4
 402249c:	f800283a 	ret

040224a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40224a0:	defff904 	addi	sp,sp,-28
 40224a4:	df000615 	stw	fp,24(sp)
 40224a8:	df000604 	addi	fp,sp,24
 40224ac:	e13ffe15 	stw	r4,-8(fp)
 40224b0:	e17fff15 	stw	r5,-4(fp)
 40224b4:	e0bfff17 	ldw	r2,-4(fp)
 40224b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40224bc:	0005303a 	rdctl	r2,status
 40224c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40224c4:	e0fffb17 	ldw	r3,-20(fp)
 40224c8:	00bfff84 	movi	r2,-2
 40224cc:	1884703a 	and	r2,r3,r2
 40224d0:	1001703a 	wrctl	status,r2
  
  return context;
 40224d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40224d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40224dc:	00c00044 	movi	r3,1
 40224e0:	e0bffa17 	ldw	r2,-24(fp)
 40224e4:	1884983a 	sll	r2,r3,r2
 40224e8:	0084303a 	nor	r2,zero,r2
 40224ec:	1007883a 	mov	r3,r2
 40224f0:	d0a00f17 	ldw	r2,-32708(gp)
 40224f4:	1884703a 	and	r2,r3,r2
 40224f8:	d0a00f15 	stw	r2,-32708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40224fc:	d0a00f17 	ldw	r2,-32708(gp)
 4022500:	100170fa 	wrctl	ienable,r2
 4022504:	e0bffc17 	ldw	r2,-16(fp)
 4022508:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402250c:	e0bffd17 	ldw	r2,-12(fp)
 4022510:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4022514:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4022518:	0001883a 	nop
}
 402251c:	e037883a 	mov	sp,fp
 4022520:	df000017 	ldw	fp,0(sp)
 4022524:	dec00104 	addi	sp,sp,4
 4022528:	f800283a 	ret

0402252c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 402252c:	defffc04 	addi	sp,sp,-16
 4022530:	df000315 	stw	fp,12(sp)
 4022534:	df000304 	addi	fp,sp,12
 4022538:	e13ffe15 	stw	r4,-8(fp)
 402253c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4022540:	000530fa 	rdctl	r2,ienable
 4022544:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4022548:	00c00044 	movi	r3,1
 402254c:	e0bfff17 	ldw	r2,-4(fp)
 4022550:	1884983a 	sll	r2,r3,r2
 4022554:	1007883a 	mov	r3,r2
 4022558:	e0bffd17 	ldw	r2,-12(fp)
 402255c:	1884703a 	and	r2,r3,r2
 4022560:	1004c03a 	cmpne	r2,r2,zero
 4022564:	10803fcc 	andi	r2,r2,255
}
 4022568:	e037883a 	mov	sp,fp
 402256c:	df000017 	ldw	fp,0(sp)
 4022570:	dec00104 	addi	sp,sp,4
 4022574:	f800283a 	ret

04022578 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4022578:	defff504 	addi	sp,sp,-44
 402257c:	dfc00a15 	stw	ra,40(sp)
 4022580:	df000915 	stw	fp,36(sp)
 4022584:	df000904 	addi	fp,sp,36
 4022588:	e13ffc15 	stw	r4,-16(fp)
 402258c:	e17ffd15 	stw	r5,-12(fp)
 4022590:	e1bffe15 	stw	r6,-8(fp)
 4022594:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4022598:	00bffa84 	movi	r2,-22
 402259c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40225a0:	e0bffd17 	ldw	r2,-12(fp)
 40225a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40225a8:	e0bff817 	ldw	r2,-32(fp)
 40225ac:	10800808 	cmpgei	r2,r2,32
 40225b0:	1000271e 	bne	r2,zero,4022650 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40225b4:	0005303a 	rdctl	r2,status
 40225b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40225bc:	e0fffb17 	ldw	r3,-20(fp)
 40225c0:	00bfff84 	movi	r2,-2
 40225c4:	1884703a 	and	r2,r3,r2
 40225c8:	1001703a 	wrctl	status,r2
  
  return context;
 40225cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40225d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40225d4:	00800034 	movhi	r2,0
 40225d8:	10811a04 	addi	r2,r2,1128
 40225dc:	e0fff817 	ldw	r3,-32(fp)
 40225e0:	180690fa 	slli	r3,r3,3
 40225e4:	10c5883a 	add	r2,r2,r3
 40225e8:	e0fffe17 	ldw	r3,-8(fp)
 40225ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40225f0:	00800034 	movhi	r2,0
 40225f4:	10811a04 	addi	r2,r2,1128
 40225f8:	e0fff817 	ldw	r3,-32(fp)
 40225fc:	180690fa 	slli	r3,r3,3
 4022600:	10c5883a 	add	r2,r2,r3
 4022604:	10800104 	addi	r2,r2,4
 4022608:	e0ffff17 	ldw	r3,-4(fp)
 402260c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4022610:	e0bffe17 	ldw	r2,-8(fp)
 4022614:	10000526 	beq	r2,zero,402262c <alt_iic_isr_register+0xb4>
 4022618:	e0bff817 	ldw	r2,-32(fp)
 402261c:	100b883a 	mov	r5,r2
 4022620:	e13ffc17 	ldw	r4,-16(fp)
 4022624:	40224180 	call	4022418 <alt_ic_irq_enable>
 4022628:	00000406 	br	402263c <alt_iic_isr_register+0xc4>
 402262c:	e0bff817 	ldw	r2,-32(fp)
 4022630:	100b883a 	mov	r5,r2
 4022634:	e13ffc17 	ldw	r4,-16(fp)
 4022638:	40224a00 	call	40224a0 <alt_ic_irq_disable>
 402263c:	e0bff715 	stw	r2,-36(fp)
 4022640:	e0bffa17 	ldw	r2,-24(fp)
 4022644:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022648:	e0bff917 	ldw	r2,-28(fp)
 402264c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4022650:	e0bff717 	ldw	r2,-36(fp)
}
 4022654:	e037883a 	mov	sp,fp
 4022658:	dfc00117 	ldw	ra,4(sp)
 402265c:	df000017 	ldw	fp,0(sp)
 4022660:	dec00204 	addi	sp,sp,8
 4022664:	f800283a 	ret

04022668 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4022668:	defff904 	addi	sp,sp,-28
 402266c:	dfc00615 	stw	ra,24(sp)
 4022670:	df000515 	stw	fp,20(sp)
 4022674:	df000504 	addi	fp,sp,20
 4022678:	e13ffc15 	stw	r4,-16(fp)
 402267c:	e17ffd15 	stw	r5,-12(fp)
 4022680:	e1bffe15 	stw	r6,-8(fp)
 4022684:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4022688:	e1bfff17 	ldw	r6,-4(fp)
 402268c:	e17ffe17 	ldw	r5,-8(fp)
 4022690:	e13ffd17 	ldw	r4,-12(fp)
 4022694:	40228a80 	call	40228a8 <open>
 4022698:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 402269c:	e0bffb17 	ldw	r2,-20(fp)
 40226a0:	10001c16 	blt	r2,zero,4022714 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40226a4:	00800034 	movhi	r2,0
 40226a8:	1080a704 	addi	r2,r2,668
 40226ac:	e0fffb17 	ldw	r3,-20(fp)
 40226b0:	18c00324 	muli	r3,r3,12
 40226b4:	10c5883a 	add	r2,r2,r3
 40226b8:	10c00017 	ldw	r3,0(r2)
 40226bc:	e0bffc17 	ldw	r2,-16(fp)
 40226c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40226c4:	00800034 	movhi	r2,0
 40226c8:	1080a704 	addi	r2,r2,668
 40226cc:	e0fffb17 	ldw	r3,-20(fp)
 40226d0:	18c00324 	muli	r3,r3,12
 40226d4:	10c5883a 	add	r2,r2,r3
 40226d8:	10800104 	addi	r2,r2,4
 40226dc:	10c00017 	ldw	r3,0(r2)
 40226e0:	e0bffc17 	ldw	r2,-16(fp)
 40226e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40226e8:	00800034 	movhi	r2,0
 40226ec:	1080a704 	addi	r2,r2,668
 40226f0:	e0fffb17 	ldw	r3,-20(fp)
 40226f4:	18c00324 	muli	r3,r3,12
 40226f8:	10c5883a 	add	r2,r2,r3
 40226fc:	10800204 	addi	r2,r2,8
 4022700:	10c00017 	ldw	r3,0(r2)
 4022704:	e0bffc17 	ldw	r2,-16(fp)
 4022708:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 402270c:	e13ffb17 	ldw	r4,-20(fp)
 4022710:	40229fc0 	call	40229fc <alt_release_fd>
  }
} 
 4022714:	0001883a 	nop
 4022718:	e037883a 	mov	sp,fp
 402271c:	dfc00117 	ldw	ra,4(sp)
 4022720:	df000017 	ldw	fp,0(sp)
 4022724:	dec00204 	addi	sp,sp,8
 4022728:	f800283a 	ret

0402272c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 402272c:	defffb04 	addi	sp,sp,-20
 4022730:	dfc00415 	stw	ra,16(sp)
 4022734:	df000315 	stw	fp,12(sp)
 4022738:	df000304 	addi	fp,sp,12
 402273c:	e13ffd15 	stw	r4,-12(fp)
 4022740:	e17ffe15 	stw	r5,-8(fp)
 4022744:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4022748:	01c07fc4 	movi	r7,511
 402274c:	01800044 	movi	r6,1
 4022750:	e17ffd17 	ldw	r5,-12(fp)
 4022754:	01000034 	movhi	r4,0
 4022758:	2100aa04 	addi	r4,r4,680
 402275c:	40226680 	call	4022668 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4022760:	01c07fc4 	movi	r7,511
 4022764:	000d883a 	mov	r6,zero
 4022768:	e17ffe17 	ldw	r5,-8(fp)
 402276c:	01000034 	movhi	r4,0
 4022770:	2100a704 	addi	r4,r4,668
 4022774:	40226680 	call	4022668 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4022778:	01c07fc4 	movi	r7,511
 402277c:	01800044 	movi	r6,1
 4022780:	e17fff17 	ldw	r5,-4(fp)
 4022784:	01000034 	movhi	r4,0
 4022788:	2100ad04 	addi	r4,r4,692
 402278c:	40226680 	call	4022668 <alt_open_fd>
}  
 4022790:	0001883a 	nop
 4022794:	e037883a 	mov	sp,fp
 4022798:	dfc00117 	ldw	ra,4(sp)
 402279c:	df000017 	ldw	fp,0(sp)
 40227a0:	dec00204 	addi	sp,sp,8
 40227a4:	f800283a 	ret

040227a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40227a8:	defffe04 	addi	sp,sp,-8
 40227ac:	dfc00115 	stw	ra,4(sp)
 40227b0:	df000015 	stw	fp,0(sp)
 40227b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40227b8:	d0a00717 	ldw	r2,-32740(gp)
 40227bc:	10000326 	beq	r2,zero,40227cc <alt_get_errno+0x24>
 40227c0:	d0a00717 	ldw	r2,-32740(gp)
 40227c4:	103ee83a 	callr	r2
 40227c8:	00000106 	br	40227d0 <alt_get_errno+0x28>
 40227cc:	d0a00b04 	addi	r2,gp,-32724
}
 40227d0:	e037883a 	mov	sp,fp
 40227d4:	dfc00117 	ldw	ra,4(sp)
 40227d8:	df000017 	ldw	fp,0(sp)
 40227dc:	dec00204 	addi	sp,sp,8
 40227e0:	f800283a 	ret

040227e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40227e4:	defffd04 	addi	sp,sp,-12
 40227e8:	df000215 	stw	fp,8(sp)
 40227ec:	df000204 	addi	fp,sp,8
 40227f0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40227f4:	e0bfff17 	ldw	r2,-4(fp)
 40227f8:	10800217 	ldw	r2,8(r2)
 40227fc:	10d00034 	orhi	r3,r2,16384
 4022800:	e0bfff17 	ldw	r2,-4(fp)
 4022804:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4022808:	e03ffe15 	stw	zero,-8(fp)
 402280c:	00001d06 	br	4022884 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4022810:	00800034 	movhi	r2,0
 4022814:	1080a704 	addi	r2,r2,668
 4022818:	e0fffe17 	ldw	r3,-8(fp)
 402281c:	18c00324 	muli	r3,r3,12
 4022820:	10c5883a 	add	r2,r2,r3
 4022824:	10c00017 	ldw	r3,0(r2)
 4022828:	e0bfff17 	ldw	r2,-4(fp)
 402282c:	10800017 	ldw	r2,0(r2)
 4022830:	1880111e 	bne	r3,r2,4022878 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4022834:	00800034 	movhi	r2,0
 4022838:	1080a704 	addi	r2,r2,668
 402283c:	e0fffe17 	ldw	r3,-8(fp)
 4022840:	18c00324 	muli	r3,r3,12
 4022844:	10c5883a 	add	r2,r2,r3
 4022848:	10800204 	addi	r2,r2,8
 402284c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4022850:	1000090e 	bge	r2,zero,4022878 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4022854:	e0bffe17 	ldw	r2,-8(fp)
 4022858:	10c00324 	muli	r3,r2,12
 402285c:	00800034 	movhi	r2,0
 4022860:	1080a704 	addi	r2,r2,668
 4022864:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4022868:	e0bfff17 	ldw	r2,-4(fp)
 402286c:	18800226 	beq	r3,r2,4022878 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4022870:	00bffcc4 	movi	r2,-13
 4022874:	00000806 	br	4022898 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4022878:	e0bffe17 	ldw	r2,-8(fp)
 402287c:	10800044 	addi	r2,r2,1
 4022880:	e0bffe15 	stw	r2,-8(fp)
 4022884:	d0a00617 	ldw	r2,-32744(gp)
 4022888:	1007883a 	mov	r3,r2
 402288c:	e0bffe17 	ldw	r2,-8(fp)
 4022890:	18bfdf2e 	bgeu	r3,r2,4022810 <__flash_rwdata_start+0xfffff30c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4022894:	0005883a 	mov	r2,zero
}
 4022898:	e037883a 	mov	sp,fp
 402289c:	df000017 	ldw	fp,0(sp)
 40228a0:	dec00104 	addi	sp,sp,4
 40228a4:	f800283a 	ret

040228a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40228a8:	defff604 	addi	sp,sp,-40
 40228ac:	dfc00915 	stw	ra,36(sp)
 40228b0:	df000815 	stw	fp,32(sp)
 40228b4:	df000804 	addi	fp,sp,32
 40228b8:	e13ffd15 	stw	r4,-12(fp)
 40228bc:	e17ffe15 	stw	r5,-8(fp)
 40228c0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40228c4:	00bfffc4 	movi	r2,-1
 40228c8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40228cc:	00bffb44 	movi	r2,-19
 40228d0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40228d4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40228d8:	d1600404 	addi	r5,gp,-32752
 40228dc:	e13ffd17 	ldw	r4,-12(fp)
 40228e0:	40223040 	call	4022304 <alt_find_dev>
 40228e4:	e0bff815 	stw	r2,-32(fp)
 40228e8:	e0bff817 	ldw	r2,-32(fp)
 40228ec:	1000051e 	bne	r2,zero,4022904 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40228f0:	e13ffd17 	ldw	r4,-12(fp)
 40228f4:	4022c280 	call	4022c28 <alt_find_file>
 40228f8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40228fc:	00800044 	movi	r2,1
 4022900:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4022904:	e0bff817 	ldw	r2,-32(fp)
 4022908:	10002926 	beq	r2,zero,40229b0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 402290c:	e13ff817 	ldw	r4,-32(fp)
 4022910:	4022d300 	call	4022d30 <alt_get_fd>
 4022914:	e0bff915 	stw	r2,-28(fp)
 4022918:	e0bff917 	ldw	r2,-28(fp)
 402291c:	1000030e 	bge	r2,zero,402292c <open+0x84>
    {
      status = index;
 4022920:	e0bff917 	ldw	r2,-28(fp)
 4022924:	e0bffa15 	stw	r2,-24(fp)
 4022928:	00002306 	br	40229b8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 402292c:	e0bff917 	ldw	r2,-28(fp)
 4022930:	10c00324 	muli	r3,r2,12
 4022934:	00800034 	movhi	r2,0
 4022938:	1080a704 	addi	r2,r2,668
 402293c:	1885883a 	add	r2,r3,r2
 4022940:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4022944:	e0fffe17 	ldw	r3,-8(fp)
 4022948:	00900034 	movhi	r2,16384
 402294c:	10bfffc4 	addi	r2,r2,-1
 4022950:	1886703a 	and	r3,r3,r2
 4022954:	e0bffc17 	ldw	r2,-16(fp)
 4022958:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 402295c:	e0bffb17 	ldw	r2,-20(fp)
 4022960:	1000051e 	bne	r2,zero,4022978 <open+0xd0>
 4022964:	e13ffc17 	ldw	r4,-16(fp)
 4022968:	40227e40 	call	40227e4 <alt_file_locked>
 402296c:	e0bffa15 	stw	r2,-24(fp)
 4022970:	e0bffa17 	ldw	r2,-24(fp)
 4022974:	10001016 	blt	r2,zero,40229b8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4022978:	e0bff817 	ldw	r2,-32(fp)
 402297c:	10800317 	ldw	r2,12(r2)
 4022980:	10000826 	beq	r2,zero,40229a4 <open+0xfc>
 4022984:	e0bff817 	ldw	r2,-32(fp)
 4022988:	10800317 	ldw	r2,12(r2)
 402298c:	e1ffff17 	ldw	r7,-4(fp)
 4022990:	e1bffe17 	ldw	r6,-8(fp)
 4022994:	e17ffd17 	ldw	r5,-12(fp)
 4022998:	e13ffc17 	ldw	r4,-16(fp)
 402299c:	103ee83a 	callr	r2
 40229a0:	00000106 	br	40229a8 <open+0x100>
 40229a4:	0005883a 	mov	r2,zero
 40229a8:	e0bffa15 	stw	r2,-24(fp)
 40229ac:	00000206 	br	40229b8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40229b0:	00bffb44 	movi	r2,-19
 40229b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40229b8:	e0bffa17 	ldw	r2,-24(fp)
 40229bc:	1000090e 	bge	r2,zero,40229e4 <open+0x13c>
  {
    alt_release_fd (index);  
 40229c0:	e13ff917 	ldw	r4,-28(fp)
 40229c4:	40229fc0 	call	40229fc <alt_release_fd>
    ALT_ERRNO = -status;
 40229c8:	40227a80 	call	40227a8 <alt_get_errno>
 40229cc:	1007883a 	mov	r3,r2
 40229d0:	e0bffa17 	ldw	r2,-24(fp)
 40229d4:	0085c83a 	sub	r2,zero,r2
 40229d8:	18800015 	stw	r2,0(r3)
    return -1;
 40229dc:	00bfffc4 	movi	r2,-1
 40229e0:	00000106 	br	40229e8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 40229e4:	e0bff917 	ldw	r2,-28(fp)
}
 40229e8:	e037883a 	mov	sp,fp
 40229ec:	dfc00117 	ldw	ra,4(sp)
 40229f0:	df000017 	ldw	fp,0(sp)
 40229f4:	dec00204 	addi	sp,sp,8
 40229f8:	f800283a 	ret

040229fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40229fc:	defffe04 	addi	sp,sp,-8
 4022a00:	df000115 	stw	fp,4(sp)
 4022a04:	df000104 	addi	fp,sp,4
 4022a08:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4022a0c:	e0bfff17 	ldw	r2,-4(fp)
 4022a10:	108000d0 	cmplti	r2,r2,3
 4022a14:	10000d1e 	bne	r2,zero,4022a4c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4022a18:	00800034 	movhi	r2,0
 4022a1c:	1080a704 	addi	r2,r2,668
 4022a20:	e0ffff17 	ldw	r3,-4(fp)
 4022a24:	18c00324 	muli	r3,r3,12
 4022a28:	10c5883a 	add	r2,r2,r3
 4022a2c:	10800204 	addi	r2,r2,8
 4022a30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4022a34:	00800034 	movhi	r2,0
 4022a38:	1080a704 	addi	r2,r2,668
 4022a3c:	e0ffff17 	ldw	r3,-4(fp)
 4022a40:	18c00324 	muli	r3,r3,12
 4022a44:	10c5883a 	add	r2,r2,r3
 4022a48:	10000015 	stw	zero,0(r2)
  }
}
 4022a4c:	0001883a 	nop
 4022a50:	e037883a 	mov	sp,fp
 4022a54:	df000017 	ldw	fp,0(sp)
 4022a58:	dec00104 	addi	sp,sp,4
 4022a5c:	f800283a 	ret

04022a60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4022a60:	defffa04 	addi	sp,sp,-24
 4022a64:	df000515 	stw	fp,20(sp)
 4022a68:	df000504 	addi	fp,sp,20
 4022a6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022a70:	0005303a 	rdctl	r2,status
 4022a74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4022a78:	e0fffc17 	ldw	r3,-16(fp)
 4022a7c:	00bfff84 	movi	r2,-2
 4022a80:	1884703a 	and	r2,r3,r2
 4022a84:	1001703a 	wrctl	status,r2
  
  return context;
 4022a88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4022a8c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4022a90:	e0bfff17 	ldw	r2,-4(fp)
 4022a94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4022a98:	e0bffd17 	ldw	r2,-12(fp)
 4022a9c:	10800017 	ldw	r2,0(r2)
 4022aa0:	e0fffd17 	ldw	r3,-12(fp)
 4022aa4:	18c00117 	ldw	r3,4(r3)
 4022aa8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4022aac:	e0bffd17 	ldw	r2,-12(fp)
 4022ab0:	10800117 	ldw	r2,4(r2)
 4022ab4:	e0fffd17 	ldw	r3,-12(fp)
 4022ab8:	18c00017 	ldw	r3,0(r3)
 4022abc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4022ac0:	e0bffd17 	ldw	r2,-12(fp)
 4022ac4:	e0fffd17 	ldw	r3,-12(fp)
 4022ac8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4022acc:	e0bffd17 	ldw	r2,-12(fp)
 4022ad0:	e0fffd17 	ldw	r3,-12(fp)
 4022ad4:	10c00015 	stw	r3,0(r2)
 4022ad8:	e0bffb17 	ldw	r2,-20(fp)
 4022adc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022ae0:	e0bffe17 	ldw	r2,-8(fp)
 4022ae4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4022ae8:	0001883a 	nop
 4022aec:	e037883a 	mov	sp,fp
 4022af0:	df000017 	ldw	fp,0(sp)
 4022af4:	dec00104 	addi	sp,sp,4
 4022af8:	f800283a 	ret

04022afc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4022afc:	defffb04 	addi	sp,sp,-20
 4022b00:	dfc00415 	stw	ra,16(sp)
 4022b04:	df000315 	stw	fp,12(sp)
 4022b08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4022b0c:	d0a00917 	ldw	r2,-32732(gp)
 4022b10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4022b14:	d0a01117 	ldw	r2,-32700(gp)
 4022b18:	10800044 	addi	r2,r2,1
 4022b1c:	d0a01115 	stw	r2,-32700(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4022b20:	00002e06 	br	4022bdc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4022b24:	e0bffd17 	ldw	r2,-12(fp)
 4022b28:	10800017 	ldw	r2,0(r2)
 4022b2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4022b30:	e0bffd17 	ldw	r2,-12(fp)
 4022b34:	10800403 	ldbu	r2,16(r2)
 4022b38:	10803fcc 	andi	r2,r2,255
 4022b3c:	10000426 	beq	r2,zero,4022b50 <alt_tick+0x54>
 4022b40:	d0a01117 	ldw	r2,-32700(gp)
 4022b44:	1000021e 	bne	r2,zero,4022b50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4022b48:	e0bffd17 	ldw	r2,-12(fp)
 4022b4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4022b50:	e0bffd17 	ldw	r2,-12(fp)
 4022b54:	10800217 	ldw	r2,8(r2)
 4022b58:	d0e01117 	ldw	r3,-32700(gp)
 4022b5c:	18801d36 	bltu	r3,r2,4022bd4 <alt_tick+0xd8>
 4022b60:	e0bffd17 	ldw	r2,-12(fp)
 4022b64:	10800403 	ldbu	r2,16(r2)
 4022b68:	10803fcc 	andi	r2,r2,255
 4022b6c:	1000191e 	bne	r2,zero,4022bd4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4022b70:	e0bffd17 	ldw	r2,-12(fp)
 4022b74:	10800317 	ldw	r2,12(r2)
 4022b78:	e0fffd17 	ldw	r3,-12(fp)
 4022b7c:	18c00517 	ldw	r3,20(r3)
 4022b80:	1809883a 	mov	r4,r3
 4022b84:	103ee83a 	callr	r2
 4022b88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4022b8c:	e0bfff17 	ldw	r2,-4(fp)
 4022b90:	1000031e 	bne	r2,zero,4022ba0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4022b94:	e13ffd17 	ldw	r4,-12(fp)
 4022b98:	4022a600 	call	4022a60 <alt_alarm_stop>
 4022b9c:	00000d06 	br	4022bd4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4022ba0:	e0bffd17 	ldw	r2,-12(fp)
 4022ba4:	10c00217 	ldw	r3,8(r2)
 4022ba8:	e0bfff17 	ldw	r2,-4(fp)
 4022bac:	1887883a 	add	r3,r3,r2
 4022bb0:	e0bffd17 	ldw	r2,-12(fp)
 4022bb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4022bb8:	e0bffd17 	ldw	r2,-12(fp)
 4022bbc:	10c00217 	ldw	r3,8(r2)
 4022bc0:	d0a01117 	ldw	r2,-32700(gp)
 4022bc4:	1880032e 	bgeu	r3,r2,4022bd4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4022bc8:	e0bffd17 	ldw	r2,-12(fp)
 4022bcc:	00c00044 	movi	r3,1
 4022bd0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4022bd4:	e0bffe17 	ldw	r2,-8(fp)
 4022bd8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4022bdc:	e0fffd17 	ldw	r3,-12(fp)
 4022be0:	d0a00904 	addi	r2,gp,-32732
 4022be4:	18bfcf1e 	bne	r3,r2,4022b24 <__flash_rwdata_start+0xfffff620>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4022be8:	0001883a 	nop
}
 4022bec:	0001883a 	nop
 4022bf0:	e037883a 	mov	sp,fp
 4022bf4:	dfc00117 	ldw	ra,4(sp)
 4022bf8:	df000017 	ldw	fp,0(sp)
 4022bfc:	dec00204 	addi	sp,sp,8
 4022c00:	f800283a 	ret

04022c04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4022c04:	deffff04 	addi	sp,sp,-4
 4022c08:	df000015 	stw	fp,0(sp)
 4022c0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4022c10:	000170fa 	wrctl	ienable,zero
}
 4022c14:	0001883a 	nop
 4022c18:	e037883a 	mov	sp,fp
 4022c1c:	df000017 	ldw	fp,0(sp)
 4022c20:	dec00104 	addi	sp,sp,4
 4022c24:	f800283a 	ret

04022c28 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4022c28:	defffb04 	addi	sp,sp,-20
 4022c2c:	dfc00415 	stw	ra,16(sp)
 4022c30:	df000315 	stw	fp,12(sp)
 4022c34:	df000304 	addi	fp,sp,12
 4022c38:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4022c3c:	d0a00217 	ldw	r2,-32760(gp)
 4022c40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4022c44:	00003106 	br	4022d0c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4022c48:	e0bffd17 	ldw	r2,-12(fp)
 4022c4c:	10800217 	ldw	r2,8(r2)
 4022c50:	1009883a 	mov	r4,r2
 4022c54:	40205340 	call	4020534 <strlen>
 4022c58:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4022c5c:	e0bffd17 	ldw	r2,-12(fp)
 4022c60:	10c00217 	ldw	r3,8(r2)
 4022c64:	e0bffe17 	ldw	r2,-8(fp)
 4022c68:	10bfffc4 	addi	r2,r2,-1
 4022c6c:	1885883a 	add	r2,r3,r2
 4022c70:	10800003 	ldbu	r2,0(r2)
 4022c74:	10803fcc 	andi	r2,r2,255
 4022c78:	1080201c 	xori	r2,r2,128
 4022c7c:	10bfe004 	addi	r2,r2,-128
 4022c80:	10800bd8 	cmpnei	r2,r2,47
 4022c84:	1000031e 	bne	r2,zero,4022c94 <alt_find_file+0x6c>
    {
      len -= 1;
 4022c88:	e0bffe17 	ldw	r2,-8(fp)
 4022c8c:	10bfffc4 	addi	r2,r2,-1
 4022c90:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4022c94:	e0bffe17 	ldw	r2,-8(fp)
 4022c98:	e0ffff17 	ldw	r3,-4(fp)
 4022c9c:	1885883a 	add	r2,r3,r2
 4022ca0:	10800003 	ldbu	r2,0(r2)
 4022ca4:	10803fcc 	andi	r2,r2,255
 4022ca8:	1080201c 	xori	r2,r2,128
 4022cac:	10bfe004 	addi	r2,r2,-128
 4022cb0:	10800be0 	cmpeqi	r2,r2,47
 4022cb4:	1000081e 	bne	r2,zero,4022cd8 <alt_find_file+0xb0>
 4022cb8:	e0bffe17 	ldw	r2,-8(fp)
 4022cbc:	e0ffff17 	ldw	r3,-4(fp)
 4022cc0:	1885883a 	add	r2,r3,r2
 4022cc4:	10800003 	ldbu	r2,0(r2)
 4022cc8:	10803fcc 	andi	r2,r2,255
 4022ccc:	1080201c 	xori	r2,r2,128
 4022cd0:	10bfe004 	addi	r2,r2,-128
 4022cd4:	10000a1e 	bne	r2,zero,4022d00 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4022cd8:	e0bffd17 	ldw	r2,-12(fp)
 4022cdc:	10800217 	ldw	r2,8(r2)
 4022ce0:	e0fffe17 	ldw	r3,-8(fp)
 4022ce4:	180d883a 	mov	r6,r3
 4022ce8:	e17fff17 	ldw	r5,-4(fp)
 4022cec:	1009883a 	mov	r4,r2
 4022cf0:	4022f340 	call	4022f34 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4022cf4:	1000021e 	bne	r2,zero,4022d00 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4022cf8:	e0bffd17 	ldw	r2,-12(fp)
 4022cfc:	00000706 	br	4022d1c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4022d00:	e0bffd17 	ldw	r2,-12(fp)
 4022d04:	10800017 	ldw	r2,0(r2)
 4022d08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4022d0c:	e0fffd17 	ldw	r3,-12(fp)
 4022d10:	d0a00204 	addi	r2,gp,-32760
 4022d14:	18bfcc1e 	bne	r3,r2,4022c48 <__flash_rwdata_start+0xfffff744>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4022d18:	0005883a 	mov	r2,zero
}
 4022d1c:	e037883a 	mov	sp,fp
 4022d20:	dfc00117 	ldw	ra,4(sp)
 4022d24:	df000017 	ldw	fp,0(sp)
 4022d28:	dec00204 	addi	sp,sp,8
 4022d2c:	f800283a 	ret

04022d30 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4022d30:	defffc04 	addi	sp,sp,-16
 4022d34:	df000315 	stw	fp,12(sp)
 4022d38:	df000304 	addi	fp,sp,12
 4022d3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4022d40:	00bffa04 	movi	r2,-24
 4022d44:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4022d48:	e03ffd15 	stw	zero,-12(fp)
 4022d4c:	00001906 	br	4022db4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4022d50:	00800034 	movhi	r2,0
 4022d54:	1080a704 	addi	r2,r2,668
 4022d58:	e0fffd17 	ldw	r3,-12(fp)
 4022d5c:	18c00324 	muli	r3,r3,12
 4022d60:	10c5883a 	add	r2,r2,r3
 4022d64:	10800017 	ldw	r2,0(r2)
 4022d68:	10000f1e 	bne	r2,zero,4022da8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4022d6c:	00800034 	movhi	r2,0
 4022d70:	1080a704 	addi	r2,r2,668
 4022d74:	e0fffd17 	ldw	r3,-12(fp)
 4022d78:	18c00324 	muli	r3,r3,12
 4022d7c:	10c5883a 	add	r2,r2,r3
 4022d80:	e0ffff17 	ldw	r3,-4(fp)
 4022d84:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4022d88:	d0e00617 	ldw	r3,-32744(gp)
 4022d8c:	e0bffd17 	ldw	r2,-12(fp)
 4022d90:	1880020e 	bge	r3,r2,4022d9c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4022d94:	e0bffd17 	ldw	r2,-12(fp)
 4022d98:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
 4022d9c:	e0bffd17 	ldw	r2,-12(fp)
 4022da0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4022da4:	00000606 	br	4022dc0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4022da8:	e0bffd17 	ldw	r2,-12(fp)
 4022dac:	10800044 	addi	r2,r2,1
 4022db0:	e0bffd15 	stw	r2,-12(fp)
 4022db4:	e0bffd17 	ldw	r2,-12(fp)
 4022db8:	10800810 	cmplti	r2,r2,32
 4022dbc:	103fe41e 	bne	r2,zero,4022d50 <__flash_rwdata_start+0xfffff84c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4022dc0:	e0bffe17 	ldw	r2,-8(fp)
}
 4022dc4:	e037883a 	mov	sp,fp
 4022dc8:	df000017 	ldw	fp,0(sp)
 4022dcc:	dec00104 	addi	sp,sp,4
 4022dd0:	f800283a 	ret

04022dd4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4022dd4:	defffb04 	addi	sp,sp,-20
 4022dd8:	df000415 	stw	fp,16(sp)
 4022ddc:	df000404 	addi	fp,sp,16
 4022de0:	e13ffe15 	stw	r4,-8(fp)
 4022de4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4022de8:	e0bfff17 	ldw	r2,-4(fp)
 4022dec:	10840070 	cmpltui	r2,r2,4097
 4022df0:	1000021e 	bne	r2,zero,4022dfc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4022df4:	00840004 	movi	r2,4096
 4022df8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4022dfc:	e0fffe17 	ldw	r3,-8(fp)
 4022e00:	e0bfff17 	ldw	r2,-4(fp)
 4022e04:	1885883a 	add	r2,r3,r2
 4022e08:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4022e0c:	e0bffe17 	ldw	r2,-8(fp)
 4022e10:	e0bffc15 	stw	r2,-16(fp)
 4022e14:	00000506 	br	4022e2c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4022e18:	e0bffc17 	ldw	r2,-16(fp)
 4022e1c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4022e20:	e0bffc17 	ldw	r2,-16(fp)
 4022e24:	10800804 	addi	r2,r2,32
 4022e28:	e0bffc15 	stw	r2,-16(fp)
 4022e2c:	e0fffc17 	ldw	r3,-16(fp)
 4022e30:	e0bffd17 	ldw	r2,-12(fp)
 4022e34:	18bff836 	bltu	r3,r2,4022e18 <__flash_rwdata_start+0xfffff914>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4022e38:	e0bffe17 	ldw	r2,-8(fp)
 4022e3c:	108007cc 	andi	r2,r2,31
 4022e40:	10000226 	beq	r2,zero,4022e4c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4022e44:	e0bffc17 	ldw	r2,-16(fp)
 4022e48:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4022e4c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4022e50:	0001883a 	nop
 4022e54:	e037883a 	mov	sp,fp
 4022e58:	df000017 	ldw	fp,0(sp)
 4022e5c:	dec00104 	addi	sp,sp,4
 4022e60:	f800283a 	ret

04022e64 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4022e64:	defffe04 	addi	sp,sp,-8
 4022e68:	df000115 	stw	fp,4(sp)
 4022e6c:	df000104 	addi	fp,sp,4
 4022e70:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4022e74:	e0bfff17 	ldw	r2,-4(fp)
 4022e78:	10bffe84 	addi	r2,r2,-6
 4022e7c:	10c00428 	cmpgeui	r3,r2,16
 4022e80:	18001a1e 	bne	r3,zero,4022eec <alt_exception_cause_generated_bad_addr+0x88>
 4022e84:	100690ba 	slli	r3,r2,2
 4022e88:	008100b4 	movhi	r2,1026
 4022e8c:	108ba704 	addi	r2,r2,11932
 4022e90:	1885883a 	add	r2,r3,r2
 4022e94:	10800017 	ldw	r2,0(r2)
 4022e98:	1000683a 	jmp	r2
 4022e9c:	04022edc 	xori	r16,zero,2235
 4022ea0:	04022edc 	xori	r16,zero,2235
 4022ea4:	04022eec 	andhi	r16,zero,2235
 4022ea8:	04022eec 	andhi	r16,zero,2235
 4022eac:	04022eec 	andhi	r16,zero,2235
 4022eb0:	04022edc 	xori	r16,zero,2235
 4022eb4:	04022ee4 	muli	r16,zero,2235
 4022eb8:	04022eec 	andhi	r16,zero,2235
 4022ebc:	04022edc 	xori	r16,zero,2235
 4022ec0:	04022edc 	xori	r16,zero,2235
 4022ec4:	04022eec 	andhi	r16,zero,2235
 4022ec8:	04022edc 	xori	r16,zero,2235
 4022ecc:	04022ee4 	muli	r16,zero,2235
 4022ed0:	04022eec 	andhi	r16,zero,2235
 4022ed4:	04022eec 	andhi	r16,zero,2235
 4022ed8:	04022edc 	xori	r16,zero,2235
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4022edc:	00800044 	movi	r2,1
 4022ee0:	00000306 	br	4022ef0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4022ee4:	0005883a 	mov	r2,zero
 4022ee8:	00000106 	br	4022ef0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4022eec:	0005883a 	mov	r2,zero
  }
}
 4022ef0:	e037883a 	mov	sp,fp
 4022ef4:	df000017 	ldw	fp,0(sp)
 4022ef8:	dec00104 	addi	sp,sp,4
 4022efc:	f800283a 	ret

04022f00 <atexit>:
 4022f00:	200b883a 	mov	r5,r4
 4022f04:	000f883a 	mov	r7,zero
 4022f08:	000d883a 	mov	r6,zero
 4022f0c:	0009883a 	mov	r4,zero
 4022f10:	4022f641 	jmpi	4022f64 <__register_exitproc>

04022f14 <exit>:
 4022f14:	defffe04 	addi	sp,sp,-8
 4022f18:	000b883a 	mov	r5,zero
 4022f1c:	dc000015 	stw	r16,0(sp)
 4022f20:	dfc00115 	stw	ra,4(sp)
 4022f24:	2021883a 	mov	r16,r4
 4022f28:	40230bc0 	call	40230bc <__call_exitprocs>
 4022f2c:	8009883a 	mov	r4,r16
 4022f30:	40234000 	call	4023400 <_exit>

04022f34 <memcmp>:
 4022f34:	218d883a 	add	r6,r4,r6
 4022f38:	21800826 	beq	r4,r6,4022f5c <memcmp+0x28>
 4022f3c:	20800003 	ldbu	r2,0(r4)
 4022f40:	28c00003 	ldbu	r3,0(r5)
 4022f44:	10c00226 	beq	r2,r3,4022f50 <memcmp+0x1c>
 4022f48:	10c5c83a 	sub	r2,r2,r3
 4022f4c:	f800283a 	ret
 4022f50:	21000044 	addi	r4,r4,1
 4022f54:	29400044 	addi	r5,r5,1
 4022f58:	003ff706 	br	4022f38 <__flash_rwdata_start+0xfffffa34>
 4022f5c:	0005883a 	mov	r2,zero
 4022f60:	f800283a 	ret

04022f64 <__register_exitproc>:
 4022f64:	00800034 	movhi	r2,0
 4022f68:	10810704 	addi	r2,r2,1052
 4022f6c:	10c00017 	ldw	r3,0(r2)
 4022f70:	defff904 	addi	sp,sp,-28
 4022f74:	dc000015 	stw	r16,0(sp)
 4022f78:	1c000c17 	ldw	r16,48(r3)
 4022f7c:	dd400515 	stw	r21,20(sp)
 4022f80:	dd000415 	stw	r20,16(sp)
 4022f84:	dcc00315 	stw	r19,12(sp)
 4022f88:	dc800215 	stw	r18,8(sp)
 4022f8c:	dc400115 	stw	r17,4(sp)
 4022f90:	dfc00615 	stw	ra,24(sp)
 4022f94:	202b883a 	mov	r21,r4
 4022f98:	2823883a 	mov	r17,r5
 4022f9c:	3027883a 	mov	r19,r6
 4022fa0:	3825883a 	mov	r18,r7
 4022fa4:	1029883a 	mov	r20,r2
 4022fa8:	8000021e 	bne	r16,zero,4022fb4 <__register_exitproc+0x50>
 4022fac:	1c000d04 	addi	r16,r3,52
 4022fb0:	1c000c15 	stw	r16,48(r3)
 4022fb4:	80800117 	ldw	r2,4(r16)
 4022fb8:	00c007c4 	movi	r3,31
 4022fbc:	1880110e 	bge	r3,r2,4023004 <__register_exitproc+0xa0>
 4022fc0:	00800034 	movhi	r2,0
 4022fc4:	10800004 	addi	r2,r2,0
 4022fc8:	1000021e 	bne	r2,zero,4022fd4 <__register_exitproc+0x70>
 4022fcc:	00bfffc4 	movi	r2,-1
 4022fd0:	00003106 	br	4023098 <__register_exitproc+0x134>
 4022fd4:	01002304 	movi	r4,140
 4022fd8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4022fdc:	1021883a 	mov	r16,r2
 4022fe0:	103ffa26 	beq	r2,zero,4022fcc <__flash_rwdata_start+0xfffffac8>
 4022fe4:	10000115 	stw	zero,4(r2)
 4022fe8:	a0800017 	ldw	r2,0(r20)
 4022fec:	10c00c17 	ldw	r3,48(r2)
 4022ff0:	80c00015 	stw	r3,0(r16)
 4022ff4:	14000c15 	stw	r16,48(r2)
 4022ff8:	80002215 	stw	zero,136(r16)
 4022ffc:	a8001d26 	beq	r21,zero,4023074 <__register_exitproc+0x110>
 4023000:	00000606 	br	402301c <__register_exitproc+0xb8>
 4023004:	a8001b26 	beq	r21,zero,4023074 <__register_exitproc+0x110>
 4023008:	80802217 	ldw	r2,136(r16)
 402300c:	1000091e 	bne	r2,zero,4023034 <__register_exitproc+0xd0>
 4023010:	00800034 	movhi	r2,0
 4023014:	10800004 	addi	r2,r2,0
 4023018:	103fec26 	beq	r2,zero,4022fcc <__flash_rwdata_start+0xfffffac8>
 402301c:	01004204 	movi	r4,264
 4023020:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4023024:	103fe926 	beq	r2,zero,4022fcc <__flash_rwdata_start+0xfffffac8>
 4023028:	10004015 	stw	zero,256(r2)
 402302c:	10004115 	stw	zero,260(r2)
 4023030:	80802215 	stw	r2,136(r16)
 4023034:	81400117 	ldw	r5,4(r16)
 4023038:	01000044 	movi	r4,1
 402303c:	2947883a 	add	r3,r5,r5
 4023040:	18c7883a 	add	r3,r3,r3
 4023044:	10c7883a 	add	r3,r2,r3
 4023048:	1cc00015 	stw	r19,0(r3)
 402304c:	2148983a 	sll	r4,r4,r5
 4023050:	11404017 	ldw	r5,256(r2)
 4023054:	290ab03a 	or	r5,r5,r4
 4023058:	11404015 	stw	r5,256(r2)
 402305c:	1c802015 	stw	r18,128(r3)
 4023060:	00c00084 	movi	r3,2
 4023064:	a8c0031e 	bne	r21,r3,4023074 <__register_exitproc+0x110>
 4023068:	10c04117 	ldw	r3,260(r2)
 402306c:	1908b03a 	or	r4,r3,r4
 4023070:	11004115 	stw	r4,260(r2)
 4023074:	80800117 	ldw	r2,4(r16)
 4023078:	10c00044 	addi	r3,r2,1
 402307c:	10800084 	addi	r2,r2,2
 4023080:	1085883a 	add	r2,r2,r2
 4023084:	1085883a 	add	r2,r2,r2
 4023088:	80c00115 	stw	r3,4(r16)
 402308c:	80a1883a 	add	r16,r16,r2
 4023090:	84400015 	stw	r17,0(r16)
 4023094:	0005883a 	mov	r2,zero
 4023098:	dfc00617 	ldw	ra,24(sp)
 402309c:	dd400517 	ldw	r21,20(sp)
 40230a0:	dd000417 	ldw	r20,16(sp)
 40230a4:	dcc00317 	ldw	r19,12(sp)
 40230a8:	dc800217 	ldw	r18,8(sp)
 40230ac:	dc400117 	ldw	r17,4(sp)
 40230b0:	dc000017 	ldw	r16,0(sp)
 40230b4:	dec00704 	addi	sp,sp,28
 40230b8:	f800283a 	ret

040230bc <__call_exitprocs>:
 40230bc:	defff504 	addi	sp,sp,-44
 40230c0:	dd000515 	stw	r20,20(sp)
 40230c4:	05000034 	movhi	r20,0
 40230c8:	dc800315 	stw	r18,12(sp)
 40230cc:	dfc00a15 	stw	ra,40(sp)
 40230d0:	df000915 	stw	fp,36(sp)
 40230d4:	ddc00815 	stw	r23,32(sp)
 40230d8:	dd800715 	stw	r22,28(sp)
 40230dc:	dd400615 	stw	r21,24(sp)
 40230e0:	dcc00415 	stw	r19,16(sp)
 40230e4:	dc400215 	stw	r17,8(sp)
 40230e8:	dc000115 	stw	r16,4(sp)
 40230ec:	d9000015 	stw	r4,0(sp)
 40230f0:	2825883a 	mov	r18,r5
 40230f4:	a5010704 	addi	r20,r20,1052
 40230f8:	a4400017 	ldw	r17,0(r20)
 40230fc:	8cc00c17 	ldw	r19,48(r17)
 4023100:	8c400c04 	addi	r17,r17,48
 4023104:	98004526 	beq	r19,zero,402321c <__call_exitprocs+0x160>
 4023108:	9c000117 	ldw	r16,4(r19)
 402310c:	00900034 	movhi	r2,16384
 4023110:	10bfffc4 	addi	r2,r2,-1
 4023114:	9d402217 	ldw	r21,136(r19)
 4023118:	85bfffc4 	addi	r22,r16,-1
 402311c:	80a1883a 	add	r16,r16,r2
 4023120:	8421883a 	add	r16,r16,r16
 4023124:	8421883a 	add	r16,r16,r16
 4023128:	ac2f883a 	add	r23,r21,r16
 402312c:	84000204 	addi	r16,r16,8
 4023130:	9c21883a 	add	r16,r19,r16
 4023134:	b0002716 	blt	r22,zero,40231d4 <__call_exitprocs+0x118>
 4023138:	90000726 	beq	r18,zero,4023158 <__call_exitprocs+0x9c>
 402313c:	a800041e 	bne	r21,zero,4023150 <__call_exitprocs+0x94>
 4023140:	b5bfffc4 	addi	r22,r22,-1
 4023144:	bdffff04 	addi	r23,r23,-4
 4023148:	843fff04 	addi	r16,r16,-4
 402314c:	003ff906 	br	4023134 <__flash_rwdata_start+0xfffffc30>
 4023150:	b9002017 	ldw	r4,128(r23)
 4023154:	913ffa1e 	bne	r18,r4,4023140 <__flash_rwdata_start+0xfffffc3c>
 4023158:	99000117 	ldw	r4,4(r19)
 402315c:	82000017 	ldw	r8,0(r16)
 4023160:	213fffc4 	addi	r4,r4,-1
 4023164:	b100021e 	bne	r22,r4,4023170 <__call_exitprocs+0xb4>
 4023168:	9d800115 	stw	r22,4(r19)
 402316c:	00000106 	br	4023174 <__call_exitprocs+0xb8>
 4023170:	80000015 	stw	zero,0(r16)
 4023174:	403ff226 	beq	r8,zero,4023140 <__flash_rwdata_start+0xfffffc3c>
 4023178:	9f000117 	ldw	fp,4(r19)
 402317c:	a8000526 	beq	r21,zero,4023194 <__call_exitprocs+0xd8>
 4023180:	00800044 	movi	r2,1
 4023184:	1592983a 	sll	r9,r2,r22
 4023188:	a9404017 	ldw	r5,256(r21)
 402318c:	494a703a 	and	r5,r9,r5
 4023190:	2800021e 	bne	r5,zero,402319c <__call_exitprocs+0xe0>
 4023194:	403ee83a 	callr	r8
 4023198:	00000906 	br	40231c0 <__call_exitprocs+0x104>
 402319c:	a9004117 	ldw	r4,260(r21)
 40231a0:	4908703a 	and	r4,r9,r4
 40231a4:	2000041e 	bne	r4,zero,40231b8 <__call_exitprocs+0xfc>
 40231a8:	b9400017 	ldw	r5,0(r23)
 40231ac:	d9000017 	ldw	r4,0(sp)
 40231b0:	403ee83a 	callr	r8
 40231b4:	00000206 	br	40231c0 <__call_exitprocs+0x104>
 40231b8:	b9000017 	ldw	r4,0(r23)
 40231bc:	403ee83a 	callr	r8
 40231c0:	99000117 	ldw	r4,4(r19)
 40231c4:	e13fcc1e 	bne	fp,r4,40230f8 <__flash_rwdata_start+0xfffffbf4>
 40231c8:	89000017 	ldw	r4,0(r17)
 40231cc:	993fdc26 	beq	r19,r4,4023140 <__flash_rwdata_start+0xfffffc3c>
 40231d0:	003fc906 	br	40230f8 <__flash_rwdata_start+0xfffffbf4>
 40231d4:	00800034 	movhi	r2,0
 40231d8:	10800004 	addi	r2,r2,0
 40231dc:	10000f26 	beq	r2,zero,402321c <__call_exitprocs+0x160>
 40231e0:	99400117 	ldw	r5,4(r19)
 40231e4:	99000017 	ldw	r4,0(r19)
 40231e8:	2800091e 	bne	r5,zero,4023210 <__call_exitprocs+0x154>
 40231ec:	20000826 	beq	r4,zero,4023210 <__call_exitprocs+0x154>
 40231f0:	89000015 	stw	r4,0(r17)
 40231f4:	a8000226 	beq	r21,zero,4023200 <__call_exitprocs+0x144>
 40231f8:	a809883a 	mov	r4,r21
 40231fc:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4023200:	9809883a 	mov	r4,r19
 4023204:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
 4023208:	8cc00017 	ldw	r19,0(r17)
 402320c:	003fbd06 	br	4023104 <__flash_rwdata_start+0xfffffc00>
 4023210:	9823883a 	mov	r17,r19
 4023214:	2027883a 	mov	r19,r4
 4023218:	003fba06 	br	4023104 <__flash_rwdata_start+0xfffffc00>
 402321c:	dfc00a17 	ldw	ra,40(sp)
 4023220:	df000917 	ldw	fp,36(sp)
 4023224:	ddc00817 	ldw	r23,32(sp)
 4023228:	dd800717 	ldw	r22,28(sp)
 402322c:	dd400617 	ldw	r21,24(sp)
 4023230:	dd000517 	ldw	r20,20(sp)
 4023234:	dcc00417 	ldw	r19,16(sp)
 4023238:	dc800317 	ldw	r18,12(sp)
 402323c:	dc400217 	ldw	r17,8(sp)
 4023240:	dc000117 	ldw	r16,4(sp)
 4023244:	dec00b04 	addi	sp,sp,44
 4023248:	f800283a 	ret

0402324c <__divsi3>:
 402324c:	20001b16 	blt	r4,zero,40232bc <__divsi3+0x70>
 4023250:	000f883a 	mov	r7,zero
 4023254:	28001616 	blt	r5,zero,40232b0 <__divsi3+0x64>
 4023258:	200d883a 	mov	r6,r4
 402325c:	29001a2e 	bgeu	r5,r4,40232c8 <__divsi3+0x7c>
 4023260:	00800804 	movi	r2,32
 4023264:	00c00044 	movi	r3,1
 4023268:	00000106 	br	4023270 <__divsi3+0x24>
 402326c:	10000d26 	beq	r2,zero,40232a4 <__divsi3+0x58>
 4023270:	294b883a 	add	r5,r5,r5
 4023274:	10bfffc4 	addi	r2,r2,-1
 4023278:	18c7883a 	add	r3,r3,r3
 402327c:	293ffb36 	bltu	r5,r4,402326c <__flash_rwdata_start+0xfffffd68>
 4023280:	0005883a 	mov	r2,zero
 4023284:	18000726 	beq	r3,zero,40232a4 <__divsi3+0x58>
 4023288:	0005883a 	mov	r2,zero
 402328c:	31400236 	bltu	r6,r5,4023298 <__divsi3+0x4c>
 4023290:	314dc83a 	sub	r6,r6,r5
 4023294:	10c4b03a 	or	r2,r2,r3
 4023298:	1806d07a 	srli	r3,r3,1
 402329c:	280ad07a 	srli	r5,r5,1
 40232a0:	183ffa1e 	bne	r3,zero,402328c <__flash_rwdata_start+0xfffffd88>
 40232a4:	38000126 	beq	r7,zero,40232ac <__divsi3+0x60>
 40232a8:	0085c83a 	sub	r2,zero,r2
 40232ac:	f800283a 	ret
 40232b0:	014bc83a 	sub	r5,zero,r5
 40232b4:	39c0005c 	xori	r7,r7,1
 40232b8:	003fe706 	br	4023258 <__flash_rwdata_start+0xfffffd54>
 40232bc:	0109c83a 	sub	r4,zero,r4
 40232c0:	01c00044 	movi	r7,1
 40232c4:	003fe306 	br	4023254 <__flash_rwdata_start+0xfffffd50>
 40232c8:	00c00044 	movi	r3,1
 40232cc:	003fee06 	br	4023288 <__flash_rwdata_start+0xfffffd84>

040232d0 <__modsi3>:
 40232d0:	20001716 	blt	r4,zero,4023330 <__modsi3+0x60>
 40232d4:	000f883a 	mov	r7,zero
 40232d8:	2005883a 	mov	r2,r4
 40232dc:	28001216 	blt	r5,zero,4023328 <__modsi3+0x58>
 40232e0:	2900162e 	bgeu	r5,r4,402333c <__modsi3+0x6c>
 40232e4:	01800804 	movi	r6,32
 40232e8:	00c00044 	movi	r3,1
 40232ec:	00000106 	br	40232f4 <__modsi3+0x24>
 40232f0:	30000a26 	beq	r6,zero,402331c <__modsi3+0x4c>
 40232f4:	294b883a 	add	r5,r5,r5
 40232f8:	31bfffc4 	addi	r6,r6,-1
 40232fc:	18c7883a 	add	r3,r3,r3
 4023300:	293ffb36 	bltu	r5,r4,40232f0 <__flash_rwdata_start+0xfffffdec>
 4023304:	18000526 	beq	r3,zero,402331c <__modsi3+0x4c>
 4023308:	1806d07a 	srli	r3,r3,1
 402330c:	11400136 	bltu	r2,r5,4023314 <__modsi3+0x44>
 4023310:	1145c83a 	sub	r2,r2,r5
 4023314:	280ad07a 	srli	r5,r5,1
 4023318:	183ffb1e 	bne	r3,zero,4023308 <__flash_rwdata_start+0xfffffe04>
 402331c:	38000126 	beq	r7,zero,4023324 <__modsi3+0x54>
 4023320:	0085c83a 	sub	r2,zero,r2
 4023324:	f800283a 	ret
 4023328:	014bc83a 	sub	r5,zero,r5
 402332c:	003fec06 	br	40232e0 <__flash_rwdata_start+0xfffffddc>
 4023330:	0109c83a 	sub	r4,zero,r4
 4023334:	01c00044 	movi	r7,1
 4023338:	003fe706 	br	40232d8 <__flash_rwdata_start+0xfffffdd4>
 402333c:	00c00044 	movi	r3,1
 4023340:	003ff106 	br	4023308 <__flash_rwdata_start+0xfffffe04>

04023344 <__udivsi3>:
 4023344:	200d883a 	mov	r6,r4
 4023348:	2900152e 	bgeu	r5,r4,40233a0 <__udivsi3+0x5c>
 402334c:	28001416 	blt	r5,zero,40233a0 <__udivsi3+0x5c>
 4023350:	00800804 	movi	r2,32
 4023354:	00c00044 	movi	r3,1
 4023358:	00000206 	br	4023364 <__udivsi3+0x20>
 402335c:	10000e26 	beq	r2,zero,4023398 <__udivsi3+0x54>
 4023360:	28000516 	blt	r5,zero,4023378 <__udivsi3+0x34>
 4023364:	294b883a 	add	r5,r5,r5
 4023368:	10bfffc4 	addi	r2,r2,-1
 402336c:	18c7883a 	add	r3,r3,r3
 4023370:	293ffa36 	bltu	r5,r4,402335c <__flash_rwdata_start+0xfffffe58>
 4023374:	18000826 	beq	r3,zero,4023398 <__udivsi3+0x54>
 4023378:	0005883a 	mov	r2,zero
 402337c:	31400236 	bltu	r6,r5,4023388 <__udivsi3+0x44>
 4023380:	314dc83a 	sub	r6,r6,r5
 4023384:	10c4b03a 	or	r2,r2,r3
 4023388:	1806d07a 	srli	r3,r3,1
 402338c:	280ad07a 	srli	r5,r5,1
 4023390:	183ffa1e 	bne	r3,zero,402337c <__flash_rwdata_start+0xfffffe78>
 4023394:	f800283a 	ret
 4023398:	0005883a 	mov	r2,zero
 402339c:	f800283a 	ret
 40233a0:	00c00044 	movi	r3,1
 40233a4:	003ff406 	br	4023378 <__flash_rwdata_start+0xfffffe74>

040233a8 <__umodsi3>:
 40233a8:	2005883a 	mov	r2,r4
 40233ac:	2900122e 	bgeu	r5,r4,40233f8 <__umodsi3+0x50>
 40233b0:	28001116 	blt	r5,zero,40233f8 <__umodsi3+0x50>
 40233b4:	01800804 	movi	r6,32
 40233b8:	00c00044 	movi	r3,1
 40233bc:	00000206 	br	40233c8 <__umodsi3+0x20>
 40233c0:	30000c26 	beq	r6,zero,40233f4 <__umodsi3+0x4c>
 40233c4:	28000516 	blt	r5,zero,40233dc <__umodsi3+0x34>
 40233c8:	294b883a 	add	r5,r5,r5
 40233cc:	31bfffc4 	addi	r6,r6,-1
 40233d0:	18c7883a 	add	r3,r3,r3
 40233d4:	293ffa36 	bltu	r5,r4,40233c0 <__flash_rwdata_start+0xfffffebc>
 40233d8:	18000626 	beq	r3,zero,40233f4 <__umodsi3+0x4c>
 40233dc:	1806d07a 	srli	r3,r3,1
 40233e0:	11400136 	bltu	r2,r5,40233e8 <__umodsi3+0x40>
 40233e4:	1145c83a 	sub	r2,r2,r5
 40233e8:	280ad07a 	srli	r5,r5,1
 40233ec:	183ffb1e 	bne	r3,zero,40233dc <__flash_rwdata_start+0xfffffed8>
 40233f0:	f800283a 	ret
 40233f4:	f800283a 	ret
 40233f8:	00c00044 	movi	r3,1
 40233fc:	003ff706 	br	40233dc <__flash_rwdata_start+0xfffffed8>

04023400 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4023400:	defffd04 	addi	sp,sp,-12
 4023404:	df000215 	stw	fp,8(sp)
 4023408:	df000204 	addi	fp,sp,8
 402340c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4023410:	0001883a 	nop
 4023414:	e0bfff17 	ldw	r2,-4(fp)
 4023418:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 402341c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4023420:	10000226 	beq	r2,zero,402342c <_exit+0x2c>
    ALT_SIM_FAIL();
 4023424:	002af070 	cmpltui	zero,zero,43969
 4023428:	00000106 	br	4023430 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 402342c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4023430:	003fff06 	br	4023430 <__flash_rwdata_start+0xffffff2c>
